//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ChildParentLinkCrud {
		///<summary>Gets one ChildParentLink object from the database using the primary key.  Returns null if not found.</summary>
		public static ChildParentLink SelectOne(long childParentLinkNum) {
			string command="SELECT * FROM childparentlink "
				+"WHERE ChildParentLinkNum = "+POut.Long(childParentLinkNum);
			List<ChildParentLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ChildParentLink object from the database using a query.</summary>
		public static ChildParentLink SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildParentLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ChildParentLink objects from the database using a query.</summary>
		public static List<ChildParentLink> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildParentLink> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ChildParentLink> TableToList(DataTable table) {
			List<ChildParentLink> retVal=new List<ChildParentLink>();
			ChildParentLink childParentLink;
			foreach(DataRow row in table.Rows) {
				childParentLink=new ChildParentLink();
				childParentLink.ChildParentLinkNum= PIn.Long  (row["ChildParentLinkNum"].ToString());
				childParentLink.ChildNum          = PIn.Long  (row["ChildNum"].ToString());
				childParentLink.ChildParentNum    = PIn.Long  (row["ChildParentNum"].ToString());
				childParentLink.Relationship      = PIn.String(row["Relationship"].ToString());
				retVal.Add(childParentLink);
			}
			return retVal;
		}

		///<summary>Converts a list of ChildParentLink into a DataTable.</summary>
		public static DataTable ListToTable(List<ChildParentLink> listChildParentLinks,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ChildParentLink";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ChildParentLinkNum");
			table.Columns.Add("ChildNum");
			table.Columns.Add("ChildParentNum");
			table.Columns.Add("Relationship");
			foreach(ChildParentLink childParentLink in listChildParentLinks) {
				table.Rows.Add(new object[] {
					POut.Long  (childParentLink.ChildParentLinkNum),
					POut.Long  (childParentLink.ChildNum),
					POut.Long  (childParentLink.ChildParentNum),
					            childParentLink.Relationship,
				});
			}
			return table;
		}

		///<summary>Inserts one ChildParentLink into the database.  Returns the new priKey.</summary>
		public static long Insert(ChildParentLink childParentLink) {
			return Insert(childParentLink,false);
		}

		///<summary>Inserts one ChildParentLink into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ChildParentLink childParentLink,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				childParentLink.ChildParentLinkNum=ReplicationServers.GetKey("childparentlink","ChildParentLinkNum");
			}
			string command="INSERT INTO childparentlink (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ChildParentLinkNum,";
			}
			command+="ChildNum,ChildParentNum,Relationship) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(childParentLink.ChildParentLinkNum)+",";
			}
			command+=
				     POut.Long  (childParentLink.ChildNum)+","
				+    POut.Long  (childParentLink.ChildParentNum)+","
				+"'"+POut.String(childParentLink.Relationship)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				childParentLink.ChildParentLinkNum=Db.NonQ(command,true,"ChildParentLinkNum","childParentLink");
			}
			return childParentLink.ChildParentLinkNum;
		}

		///<summary>Inserts one ChildParentLink into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildParentLink childParentLink) {
			return InsertNoCache(childParentLink,false);
		}

		///<summary>Inserts one ChildParentLink into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildParentLink childParentLink,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO childparentlink (";
			if(!useExistingPK && isRandomKeys) {
				childParentLink.ChildParentLinkNum=ReplicationServers.GetKeyNoCache("childparentlink","ChildParentLinkNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ChildParentLinkNum,";
			}
			command+="ChildNum,ChildParentNum,Relationship) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(childParentLink.ChildParentLinkNum)+",";
			}
			command+=
				     POut.Long  (childParentLink.ChildNum)+","
				+    POut.Long  (childParentLink.ChildParentNum)+","
				+"'"+POut.String(childParentLink.Relationship)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				childParentLink.ChildParentLinkNum=Db.NonQ(command,true,"ChildParentLinkNum","childParentLink");
			}
			return childParentLink.ChildParentLinkNum;
		}

		///<summary>Updates one ChildParentLink in the database.</summary>
		public static void Update(ChildParentLink childParentLink) {
			string command="UPDATE childparentlink SET "
				+"ChildNum          =  "+POut.Long  (childParentLink.ChildNum)+", "
				+"ChildParentNum    =  "+POut.Long  (childParentLink.ChildParentNum)+", "
				+"Relationship      = '"+POut.String(childParentLink.Relationship)+"' "
				+"WHERE ChildParentLinkNum = "+POut.Long(childParentLink.ChildParentLinkNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ChildParentLink in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ChildParentLink childParentLink,ChildParentLink oldChildParentLink) {
			string command="";
			if(childParentLink.ChildNum != oldChildParentLink.ChildNum) {
				if(command!="") { command+=",";}
				command+="ChildNum = "+POut.Long(childParentLink.ChildNum)+"";
			}
			if(childParentLink.ChildParentNum != oldChildParentLink.ChildParentNum) {
				if(command!="") { command+=",";}
				command+="ChildParentNum = "+POut.Long(childParentLink.ChildParentNum)+"";
			}
			if(childParentLink.Relationship != oldChildParentLink.Relationship) {
				if(command!="") { command+=",";}
				command+="Relationship = '"+POut.String(childParentLink.Relationship)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE childparentlink SET "+command
				+" WHERE ChildParentLinkNum = "+POut.Long(childParentLink.ChildParentLinkNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ChildParentLink,ChildParentLink) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ChildParentLink childParentLink,ChildParentLink oldChildParentLink) {
			if(childParentLink.ChildNum != oldChildParentLink.ChildNum) {
				return true;
			}
			if(childParentLink.ChildParentNum != oldChildParentLink.ChildParentNum) {
				return true;
			}
			if(childParentLink.Relationship != oldChildParentLink.Relationship) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ChildParentLink from the database.</summary>
		public static void Delete(long childParentLinkNum) {
			string command="DELETE FROM childparentlink "
				+"WHERE ChildParentLinkNum = "+POut.Long(childParentLinkNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ChildParentLinks from the database.</summary>
		public static void DeleteMany(List<long> listChildParentLinkNums) {
			if(listChildParentLinkNums==null || listChildParentLinkNums.Count==0) {
				return;
			}
			string command="DELETE FROM childparentlink "
				+"WHERE ChildParentLinkNum IN("+string.Join(",",listChildParentLinkNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}