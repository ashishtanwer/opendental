//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class PatFieldPickItemCrud {
		///<summary>Gets one PatFieldPickItem object from the database using the primary key.  Returns null if not found.</summary>
		public static PatFieldPickItem SelectOne(long patFieldPickItemNum) {
			string command="SELECT * FROM patfieldpickitem "
				+"WHERE PatFieldPickItemNum = "+POut.Long(patFieldPickItemNum);
			List<PatFieldPickItem> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one PatFieldPickItem object from the database using a query.</summary>
		public static PatFieldPickItem SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PatFieldPickItem> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of PatFieldPickItem objects from the database using a query.</summary>
		public static List<PatFieldPickItem> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PatFieldPickItem> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<PatFieldPickItem> TableToList(DataTable table) {
			List<PatFieldPickItem> retVal=new List<PatFieldPickItem>();
			PatFieldPickItem patFieldPickItem;
			foreach(DataRow row in table.Rows) {
				patFieldPickItem=new PatFieldPickItem();
				patFieldPickItem.PatFieldPickItemNum= PIn.Long  (row["PatFieldPickItemNum"].ToString());
				patFieldPickItem.PatFieldDefNum     = PIn.Long  (row["PatFieldDefNum"].ToString());
				patFieldPickItem.Name               = PIn.String(row["Name"].ToString());
				patFieldPickItem.Abbreviation       = PIn.String(row["Abbreviation"].ToString());
				patFieldPickItem.IsHidden           = PIn.Bool  (row["IsHidden"].ToString());
				patFieldPickItem.ItemOrder          = PIn.Int   (row["ItemOrder"].ToString());
				retVal.Add(patFieldPickItem);
			}
			return retVal;
		}

		///<summary>Converts a list of PatFieldPickItem into a DataTable.</summary>
		public static DataTable ListToTable(List<PatFieldPickItem> listPatFieldPickItems,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="PatFieldPickItem";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("PatFieldPickItemNum");
			table.Columns.Add("PatFieldDefNum");
			table.Columns.Add("Name");
			table.Columns.Add("Abbreviation");
			table.Columns.Add("IsHidden");
			table.Columns.Add("ItemOrder");
			foreach(PatFieldPickItem patFieldPickItem in listPatFieldPickItems) {
				table.Rows.Add(new object[] {
					POut.Long  (patFieldPickItem.PatFieldPickItemNum),
					POut.Long  (patFieldPickItem.PatFieldDefNum),
					            patFieldPickItem.Name,
					            patFieldPickItem.Abbreviation,
					POut.Bool  (patFieldPickItem.IsHidden),
					POut.Int   (patFieldPickItem.ItemOrder),
				});
			}
			return table;
		}

		///<summary>Inserts one PatFieldPickItem into the database.  Returns the new priKey.</summary>
		public static long Insert(PatFieldPickItem patFieldPickItem) {
			return Insert(patFieldPickItem,false);
		}

		///<summary>Inserts one PatFieldPickItem into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(PatFieldPickItem patFieldPickItem,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				patFieldPickItem.PatFieldPickItemNum=ReplicationServers.GetKey("patfieldpickitem","PatFieldPickItemNum");
			}
			string command="INSERT INTO patfieldpickitem (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="PatFieldPickItemNum,";
			}
			command+="PatFieldDefNum,Name,Abbreviation,IsHidden,ItemOrder) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(patFieldPickItem.PatFieldPickItemNum)+",";
			}
			command+=
				     POut.Long  (patFieldPickItem.PatFieldDefNum)+","
				+"'"+POut.String(patFieldPickItem.Name)+"',"
				+"'"+POut.String(patFieldPickItem.Abbreviation)+"',"
				+    POut.Bool  (patFieldPickItem.IsHidden)+","
				+    POut.Int   (patFieldPickItem.ItemOrder)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				patFieldPickItem.PatFieldPickItemNum=Db.NonQ(command,true,"PatFieldPickItemNum","patFieldPickItem");
			}
			return patFieldPickItem.PatFieldPickItemNum;
		}

		///<summary>Inserts one PatFieldPickItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PatFieldPickItem patFieldPickItem) {
			return InsertNoCache(patFieldPickItem,false);
		}

		///<summary>Inserts one PatFieldPickItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PatFieldPickItem patFieldPickItem,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO patfieldpickitem (";
			if(!useExistingPK && isRandomKeys) {
				patFieldPickItem.PatFieldPickItemNum=ReplicationServers.GetKeyNoCache("patfieldpickitem","PatFieldPickItemNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="PatFieldPickItemNum,";
			}
			command+="PatFieldDefNum,Name,Abbreviation,IsHidden,ItemOrder) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(patFieldPickItem.PatFieldPickItemNum)+",";
			}
			command+=
				     POut.Long  (patFieldPickItem.PatFieldDefNum)+","
				+"'"+POut.String(patFieldPickItem.Name)+"',"
				+"'"+POut.String(patFieldPickItem.Abbreviation)+"',"
				+    POut.Bool  (patFieldPickItem.IsHidden)+","
				+    POut.Int   (patFieldPickItem.ItemOrder)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				patFieldPickItem.PatFieldPickItemNum=Db.NonQ(command,true,"PatFieldPickItemNum","patFieldPickItem");
			}
			return patFieldPickItem.PatFieldPickItemNum;
		}

		///<summary>Updates one PatFieldPickItem in the database.</summary>
		public static void Update(PatFieldPickItem patFieldPickItem) {
			string command="UPDATE patfieldpickitem SET "
				+"PatFieldDefNum     =  "+POut.Long  (patFieldPickItem.PatFieldDefNum)+", "
				+"Name               = '"+POut.String(patFieldPickItem.Name)+"', "
				+"Abbreviation       = '"+POut.String(patFieldPickItem.Abbreviation)+"', "
				+"IsHidden           =  "+POut.Bool  (patFieldPickItem.IsHidden)+", "
				+"ItemOrder          =  "+POut.Int   (patFieldPickItem.ItemOrder)+" "
				+"WHERE PatFieldPickItemNum = "+POut.Long(patFieldPickItem.PatFieldPickItemNum);
			Db.NonQ(command);
		}

		///<summary>Updates one PatFieldPickItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(PatFieldPickItem patFieldPickItem,PatFieldPickItem oldPatFieldPickItem) {
			string command="";
			if(patFieldPickItem.PatFieldDefNum != oldPatFieldPickItem.PatFieldDefNum) {
				if(command!="") { command+=",";}
				command+="PatFieldDefNum = "+POut.Long(patFieldPickItem.PatFieldDefNum)+"";
			}
			if(patFieldPickItem.Name != oldPatFieldPickItem.Name) {
				if(command!="") { command+=",";}
				command+="Name = '"+POut.String(patFieldPickItem.Name)+"'";
			}
			if(patFieldPickItem.Abbreviation != oldPatFieldPickItem.Abbreviation) {
				if(command!="") { command+=",";}
				command+="Abbreviation = '"+POut.String(patFieldPickItem.Abbreviation)+"'";
			}
			if(patFieldPickItem.IsHidden != oldPatFieldPickItem.IsHidden) {
				if(command!="") { command+=",";}
				command+="IsHidden = "+POut.Bool(patFieldPickItem.IsHidden)+"";
			}
			if(patFieldPickItem.ItemOrder != oldPatFieldPickItem.ItemOrder) {
				if(command!="") { command+=",";}
				command+="ItemOrder = "+POut.Int(patFieldPickItem.ItemOrder)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE patfieldpickitem SET "+command
				+" WHERE PatFieldPickItemNum = "+POut.Long(patFieldPickItem.PatFieldPickItemNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(PatFieldPickItem,PatFieldPickItem) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(PatFieldPickItem patFieldPickItem,PatFieldPickItem oldPatFieldPickItem) {
			if(patFieldPickItem.PatFieldDefNum != oldPatFieldPickItem.PatFieldDefNum) {
				return true;
			}
			if(patFieldPickItem.Name != oldPatFieldPickItem.Name) {
				return true;
			}
			if(patFieldPickItem.Abbreviation != oldPatFieldPickItem.Abbreviation) {
				return true;
			}
			if(patFieldPickItem.IsHidden != oldPatFieldPickItem.IsHidden) {
				return true;
			}
			if(patFieldPickItem.ItemOrder != oldPatFieldPickItem.ItemOrder) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one PatFieldPickItem from the database.</summary>
		public static void Delete(long patFieldPickItemNum) {
			string command="DELETE FROM patfieldpickitem "
				+"WHERE PatFieldPickItemNum = "+POut.Long(patFieldPickItemNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many PatFieldPickItems from the database.</summary>
		public static void DeleteMany(List<long> listPatFieldPickItemNums) {
			if(listPatFieldPickItemNums==null || listPatFieldPickItemNums.Count==0) {
				return;
			}
			string command="DELETE FROM patfieldpickitem "
				+"WHERE PatFieldPickItemNum IN("+string.Join(",",listPatFieldPickItemNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}