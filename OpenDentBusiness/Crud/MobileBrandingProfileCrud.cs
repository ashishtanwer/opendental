//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class MobileBrandingProfileCrud {
		///<summary>Gets one MobileBrandingProfile object from the database using the primary key.  Returns null if not found.</summary>
		public static MobileBrandingProfile SelectOne(long mobileBrandingProfileNum) {
			string command="SELECT * FROM mobilebrandingprofile "
				+"WHERE MobileBrandingProfileNum = "+POut.Long(mobileBrandingProfileNum);
			List<MobileBrandingProfile> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MobileBrandingProfile object from the database using a query.</summary>
		public static MobileBrandingProfile SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MobileBrandingProfile> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of MobileBrandingProfile objects from the database using a query.</summary>
		public static List<MobileBrandingProfile> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MobileBrandingProfile> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<MobileBrandingProfile> TableToList(DataTable table) {
			List<MobileBrandingProfile> retVal=new List<MobileBrandingProfile>();
			MobileBrandingProfile mobileBrandingProfile;
			foreach(DataRow row in table.Rows) {
				mobileBrandingProfile=new MobileBrandingProfile();
				mobileBrandingProfile.MobileBrandingProfileNum= PIn.Long  (row["MobileBrandingProfileNum"].ToString());
				mobileBrandingProfile.ClinicNum               = PIn.Long  (row["ClinicNum"].ToString());
				mobileBrandingProfile.OfficeDescription       = PIn.String(row["OfficeDescription"].ToString());
				mobileBrandingProfile.LogoFilePath            = PIn.String(row["LogoFilePath"].ToString());
				mobileBrandingProfile.DateTStamp              = PIn.DateT (row["DateTStamp"].ToString());
				retVal.Add(mobileBrandingProfile);
			}
			return retVal;
		}

		///<summary>Converts a list of MobileBrandingProfile into a DataTable.</summary>
		public static DataTable ListToTable(List<MobileBrandingProfile> listMobileBrandingProfiles,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="MobileBrandingProfile";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("MobileBrandingProfileNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("OfficeDescription");
			table.Columns.Add("LogoFilePath");
			table.Columns.Add("DateTStamp");
			foreach(MobileBrandingProfile mobileBrandingProfile in listMobileBrandingProfiles) {
				table.Rows.Add(new object[] {
					POut.Long  (mobileBrandingProfile.MobileBrandingProfileNum),
					POut.Long  (mobileBrandingProfile.ClinicNum),
					            mobileBrandingProfile.OfficeDescription,
					            mobileBrandingProfile.LogoFilePath,
					POut.DateT (mobileBrandingProfile.DateTStamp,false),
				});
			}
			return table;
		}

		///<summary>Inserts one MobileBrandingProfile into the database.  Returns the new priKey.</summary>
		public static long Insert(MobileBrandingProfile mobileBrandingProfile) {
			return Insert(mobileBrandingProfile,false);
		}

		///<summary>Inserts one MobileBrandingProfile into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(MobileBrandingProfile mobileBrandingProfile,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				mobileBrandingProfile.MobileBrandingProfileNum=ReplicationServers.GetKey("mobilebrandingprofile","MobileBrandingProfileNum");
			}
			string command="INSERT INTO mobilebrandingprofile (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="MobileBrandingProfileNum,";
			}
			command+="ClinicNum,OfficeDescription,LogoFilePath) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(mobileBrandingProfile.MobileBrandingProfileNum)+",";
			}
			command+=
				     POut.Long  (mobileBrandingProfile.ClinicNum)+","
				+"'"+POut.String(mobileBrandingProfile.OfficeDescription)+"',"
				+"'"+POut.String(mobileBrandingProfile.LogoFilePath)+"')";
				//DateTStamp can only be set by MySQL
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				mobileBrandingProfile.MobileBrandingProfileNum=Db.NonQ(command,true,"MobileBrandingProfileNum","mobileBrandingProfile");
			}
			return mobileBrandingProfile.MobileBrandingProfileNum;
		}

		///<summary>Inserts one MobileBrandingProfile into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MobileBrandingProfile mobileBrandingProfile) {
			return InsertNoCache(mobileBrandingProfile,false);
		}

		///<summary>Inserts one MobileBrandingProfile into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MobileBrandingProfile mobileBrandingProfile,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO mobilebrandingprofile (";
			if(!useExistingPK && isRandomKeys) {
				mobileBrandingProfile.MobileBrandingProfileNum=ReplicationServers.GetKeyNoCache("mobilebrandingprofile","MobileBrandingProfileNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="MobileBrandingProfileNum,";
			}
			command+="ClinicNum,OfficeDescription,LogoFilePath) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(mobileBrandingProfile.MobileBrandingProfileNum)+",";
			}
			command+=
				     POut.Long  (mobileBrandingProfile.ClinicNum)+","
				+"'"+POut.String(mobileBrandingProfile.OfficeDescription)+"',"
				+"'"+POut.String(mobileBrandingProfile.LogoFilePath)+"')";
				//DateTStamp can only be set by MySQL
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				mobileBrandingProfile.MobileBrandingProfileNum=Db.NonQ(command,true,"MobileBrandingProfileNum","mobileBrandingProfile");
			}
			return mobileBrandingProfile.MobileBrandingProfileNum;
		}

		///<summary>Updates one MobileBrandingProfile in the database.</summary>
		public static void Update(MobileBrandingProfile mobileBrandingProfile) {
			string command="UPDATE mobilebrandingprofile SET "
				+"ClinicNum               =  "+POut.Long  (mobileBrandingProfile.ClinicNum)+", "
				+"OfficeDescription       = '"+POut.String(mobileBrandingProfile.OfficeDescription)+"', "
				+"LogoFilePath            = '"+POut.String(mobileBrandingProfile.LogoFilePath)+"' "
				//DateTStamp can only be set by MySQL
				+"WHERE MobileBrandingProfileNum = "+POut.Long(mobileBrandingProfile.MobileBrandingProfileNum);
			Db.NonQ(command);
		}

		///<summary>Updates one MobileBrandingProfile in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(MobileBrandingProfile mobileBrandingProfile,MobileBrandingProfile oldMobileBrandingProfile) {
			string command="";
			if(mobileBrandingProfile.ClinicNum != oldMobileBrandingProfile.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(mobileBrandingProfile.ClinicNum)+"";
			}
			if(mobileBrandingProfile.OfficeDescription != oldMobileBrandingProfile.OfficeDescription) {
				if(command!="") { command+=",";}
				command+="OfficeDescription = '"+POut.String(mobileBrandingProfile.OfficeDescription)+"'";
			}
			if(mobileBrandingProfile.LogoFilePath != oldMobileBrandingProfile.LogoFilePath) {
				if(command!="") { command+=",";}
				command+="LogoFilePath = '"+POut.String(mobileBrandingProfile.LogoFilePath)+"'";
			}
			//DateTStamp can only be set by MySQL
			if(command=="") {
				return false;
			}
			command="UPDATE mobilebrandingprofile SET "+command
				+" WHERE MobileBrandingProfileNum = "+POut.Long(mobileBrandingProfile.MobileBrandingProfileNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(MobileBrandingProfile,MobileBrandingProfile) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(MobileBrandingProfile mobileBrandingProfile,MobileBrandingProfile oldMobileBrandingProfile) {
			if(mobileBrandingProfile.ClinicNum != oldMobileBrandingProfile.ClinicNum) {
				return true;
			}
			if(mobileBrandingProfile.OfficeDescription != oldMobileBrandingProfile.OfficeDescription) {
				return true;
			}
			if(mobileBrandingProfile.LogoFilePath != oldMobileBrandingProfile.LogoFilePath) {
				return true;
			}
			//DateTStamp can only be set by MySQL
			return false;
		}

		///<summary>Deletes one MobileBrandingProfile from the database.</summary>
		public static void Delete(long mobileBrandingProfileNum) {
			string command="DELETE FROM mobilebrandingprofile "
				+"WHERE MobileBrandingProfileNum = "+POut.Long(mobileBrandingProfileNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many MobileBrandingProfiles from the database.</summary>
		public static void DeleteMany(List<long> listMobileBrandingProfileNums) {
			if(listMobileBrandingProfileNums==null || listMobileBrandingProfileNums.Count==0) {
				return;
			}
			string command="DELETE FROM mobilebrandingprofile "
				+"WHERE MobileBrandingProfileNum IN("+string.Join(",",listMobileBrandingProfileNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}