//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class MobileAppDeviceCrud {
		///<summary>Gets one MobileAppDevice object from the database using the primary key.  Returns null if not found.</summary>
		public static MobileAppDevice SelectOne(long mobileAppDeviceNum) {
			string command="SELECT * FROM mobileappdevice "
				+"WHERE MobileAppDeviceNum = "+POut.Long(mobileAppDeviceNum);
			List<MobileAppDevice> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MobileAppDevice object from the database using a query.</summary>
		public static MobileAppDevice SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MobileAppDevice> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of MobileAppDevice objects from the database using a query.</summary>
		public static List<MobileAppDevice> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MobileAppDevice> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<MobileAppDevice> TableToList(DataTable table) {
			List<MobileAppDevice> retVal=new List<MobileAppDevice>();
			MobileAppDevice mobileAppDevice;
			foreach(DataRow row in table.Rows) {
				mobileAppDevice=new MobileAppDevice();
				mobileAppDevice.MobileAppDeviceNum   = PIn.Long  (row["MobileAppDeviceNum"].ToString());
				mobileAppDevice.ClinicNum            = PIn.Long  (row["ClinicNum"].ToString());
				mobileAppDevice.DeviceName           = PIn.String(row["DeviceName"].ToString());
				mobileAppDevice.UniqueID             = PIn.String(row["UniqueID"].ToString());
				mobileAppDevice.IsEclipboardEnabled  = PIn.Bool  (row["IsEclipboardEnabled"].ToString());
				mobileAppDevice.PatNum               = PIn.Long  (row["PatNum"].ToString());
				mobileAppDevice.IsBYODDevice         = PIn.Bool  (row["IsBYODDevice"].ToString());
				mobileAppDevice.LastCheckInActivity  = PIn.DateT (row["LastCheckInActivity"].ToString());
				mobileAppDevice.EclipboardLastAttempt= PIn.DateT (row["EclipboardLastAttempt"].ToString());
				mobileAppDevice.EclipboardLastLogin  = PIn.DateT (row["EclipboardLastLogin"].ToString());
				mobileAppDevice.DevicePage           = (OpenDentBusiness.MADPage)PIn.Int(row["DevicePage"].ToString());
				mobileAppDevice.UserNum              = PIn.Long  (row["UserNum"].ToString());
				mobileAppDevice.ODTouchLastLogin     = PIn.DateT (row["ODTouchLastLogin"].ToString());
				mobileAppDevice.ODTouchLastAttempt   = PIn.DateT (row["ODTouchLastAttempt"].ToString());
				mobileAppDevice.IsODTouchEnabled     = PIn.Bool  (row["IsODTouchEnabled"].ToString());
				retVal.Add(mobileAppDevice);
			}
			return retVal;
		}

		///<summary>Converts a list of MobileAppDevice into a DataTable.</summary>
		public static DataTable ListToTable(List<MobileAppDevice> listMobileAppDevices,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="MobileAppDevice";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("MobileAppDeviceNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("DeviceName");
			table.Columns.Add("UniqueID");
			table.Columns.Add("IsEclipboardEnabled");
			table.Columns.Add("PatNum");
			table.Columns.Add("IsBYODDevice");
			table.Columns.Add("LastCheckInActivity");
			table.Columns.Add("EclipboardLastAttempt");
			table.Columns.Add("EclipboardLastLogin");
			table.Columns.Add("DevicePage");
			table.Columns.Add("UserNum");
			table.Columns.Add("ODTouchLastLogin");
			table.Columns.Add("ODTouchLastAttempt");
			table.Columns.Add("IsODTouchEnabled");
			foreach(MobileAppDevice mobileAppDevice in listMobileAppDevices) {
				table.Rows.Add(new object[] {
					POut.Long  (mobileAppDevice.MobileAppDeviceNum),
					POut.Long  (mobileAppDevice.ClinicNum),
					            mobileAppDevice.DeviceName,
					            mobileAppDevice.UniqueID,
					POut.Bool  (mobileAppDevice.IsEclipboardEnabled),
					POut.Long  (mobileAppDevice.PatNum),
					POut.Bool  (mobileAppDevice.IsBYODDevice),
					POut.DateT (mobileAppDevice.LastCheckInActivity,false),
					POut.DateT (mobileAppDevice.EclipboardLastAttempt,false),
					POut.DateT (mobileAppDevice.EclipboardLastLogin,false),
					POut.Int   ((int)mobileAppDevice.DevicePage),
					POut.Long  (mobileAppDevice.UserNum),
					POut.DateT (mobileAppDevice.ODTouchLastLogin,false),
					POut.DateT (mobileAppDevice.ODTouchLastAttempt,false),
					POut.Bool  (mobileAppDevice.IsODTouchEnabled),
				});
			}
			return table;
		}

		///<summary>Inserts one MobileAppDevice into the database.  Returns the new priKey.</summary>
		public static long Insert(MobileAppDevice mobileAppDevice) {
			return Insert(mobileAppDevice,false);
		}

		///<summary>Inserts one MobileAppDevice into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(MobileAppDevice mobileAppDevice,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				mobileAppDevice.MobileAppDeviceNum=ReplicationServers.GetKey("mobileappdevice","MobileAppDeviceNum");
			}
			string command="INSERT INTO mobileappdevice (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="MobileAppDeviceNum,";
			}
			command+="ClinicNum,DeviceName,UniqueID,IsEclipboardEnabled,PatNum,IsBYODDevice,LastCheckInActivity,EclipboardLastAttempt,EclipboardLastLogin,DevicePage,UserNum,ODTouchLastLogin,ODTouchLastAttempt,IsODTouchEnabled) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(mobileAppDevice.MobileAppDeviceNum)+",";
			}
			command+=
				     POut.Long  (mobileAppDevice.ClinicNum)+","
				+"'"+POut.String(mobileAppDevice.DeviceName)+"',"
				+"'"+POut.String(mobileAppDevice.UniqueID)+"',"
				+    POut.Bool  (mobileAppDevice.IsEclipboardEnabled)+","
				+    POut.Long  (mobileAppDevice.PatNum)+","
				+    POut.Bool  (mobileAppDevice.IsBYODDevice)+","
				+    POut.DateT (mobileAppDevice.LastCheckInActivity)+","
				+    POut.DateT (mobileAppDevice.EclipboardLastAttempt)+","
				+    POut.DateT (mobileAppDevice.EclipboardLastLogin)+","
				+    POut.Int   ((int)mobileAppDevice.DevicePage)+","
				+    POut.Long  (mobileAppDevice.UserNum)+","
				+    POut.DateT (mobileAppDevice.ODTouchLastLogin)+","
				+    POut.DateT (mobileAppDevice.ODTouchLastAttempt)+","
				+    POut.Bool  (mobileAppDevice.IsODTouchEnabled)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				mobileAppDevice.MobileAppDeviceNum=Db.NonQ(command,true,"MobileAppDeviceNum","mobileAppDevice");
			}
			return mobileAppDevice.MobileAppDeviceNum;
		}

		///<summary>Inserts one MobileAppDevice into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MobileAppDevice mobileAppDevice) {
			return InsertNoCache(mobileAppDevice,false);
		}

		///<summary>Inserts one MobileAppDevice into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MobileAppDevice mobileAppDevice,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO mobileappdevice (";
			if(!useExistingPK && isRandomKeys) {
				mobileAppDevice.MobileAppDeviceNum=ReplicationServers.GetKeyNoCache("mobileappdevice","MobileAppDeviceNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="MobileAppDeviceNum,";
			}
			command+="ClinicNum,DeviceName,UniqueID,IsEclipboardEnabled,PatNum,IsBYODDevice,LastCheckInActivity,EclipboardLastAttempt,EclipboardLastLogin,DevicePage,UserNum,ODTouchLastLogin,ODTouchLastAttempt,IsODTouchEnabled) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(mobileAppDevice.MobileAppDeviceNum)+",";
			}
			command+=
				     POut.Long  (mobileAppDevice.ClinicNum)+","
				+"'"+POut.String(mobileAppDevice.DeviceName)+"',"
				+"'"+POut.String(mobileAppDevice.UniqueID)+"',"
				+    POut.Bool  (mobileAppDevice.IsEclipboardEnabled)+","
				+    POut.Long  (mobileAppDevice.PatNum)+","
				+    POut.Bool  (mobileAppDevice.IsBYODDevice)+","
				+    POut.DateT (mobileAppDevice.LastCheckInActivity)+","
				+    POut.DateT (mobileAppDevice.EclipboardLastAttempt)+","
				+    POut.DateT (mobileAppDevice.EclipboardLastLogin)+","
				+    POut.Int   ((int)mobileAppDevice.DevicePage)+","
				+    POut.Long  (mobileAppDevice.UserNum)+","
				+    POut.DateT (mobileAppDevice.ODTouchLastLogin)+","
				+    POut.DateT (mobileAppDevice.ODTouchLastAttempt)+","
				+    POut.Bool  (mobileAppDevice.IsODTouchEnabled)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				mobileAppDevice.MobileAppDeviceNum=Db.NonQ(command,true,"MobileAppDeviceNum","mobileAppDevice");
			}
			return mobileAppDevice.MobileAppDeviceNum;
		}

		///<summary>Updates one MobileAppDevice in the database.</summary>
		public static void Update(MobileAppDevice mobileAppDevice) {
			string command="UPDATE mobileappdevice SET "
				+"ClinicNum            =  "+POut.Long  (mobileAppDevice.ClinicNum)+", "
				+"DeviceName           = '"+POut.String(mobileAppDevice.DeviceName)+"', "
				+"UniqueID             = '"+POut.String(mobileAppDevice.UniqueID)+"', "
				+"IsEclipboardEnabled  =  "+POut.Bool  (mobileAppDevice.IsEclipboardEnabled)+", "
				+"PatNum               =  "+POut.Long  (mobileAppDevice.PatNum)+", "
				+"IsBYODDevice         =  "+POut.Bool  (mobileAppDevice.IsBYODDevice)+", "
				+"LastCheckInActivity  =  "+POut.DateT (mobileAppDevice.LastCheckInActivity)+", "
				+"EclipboardLastAttempt=  "+POut.DateT (mobileAppDevice.EclipboardLastAttempt)+", "
				+"EclipboardLastLogin  =  "+POut.DateT (mobileAppDevice.EclipboardLastLogin)+", "
				+"DevicePage           =  "+POut.Int   ((int)mobileAppDevice.DevicePage)+", "
				+"UserNum              =  "+POut.Long  (mobileAppDevice.UserNum)+", "
				+"ODTouchLastLogin     =  "+POut.DateT (mobileAppDevice.ODTouchLastLogin)+", "
				+"ODTouchLastAttempt   =  "+POut.DateT (mobileAppDevice.ODTouchLastAttempt)+", "
				+"IsODTouchEnabled     =  "+POut.Bool  (mobileAppDevice.IsODTouchEnabled)+" "
				+"WHERE MobileAppDeviceNum = "+POut.Long(mobileAppDevice.MobileAppDeviceNum);
			Db.NonQ(command);
		}

		///<summary>Updates one MobileAppDevice in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(MobileAppDevice mobileAppDevice,MobileAppDevice oldMobileAppDevice) {
			string command="";
			if(mobileAppDevice.ClinicNum != oldMobileAppDevice.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(mobileAppDevice.ClinicNum)+"";
			}
			if(mobileAppDevice.DeviceName != oldMobileAppDevice.DeviceName) {
				if(command!="") { command+=",";}
				command+="DeviceName = '"+POut.String(mobileAppDevice.DeviceName)+"'";
			}
			if(mobileAppDevice.UniqueID != oldMobileAppDevice.UniqueID) {
				if(command!="") { command+=",";}
				command+="UniqueID = '"+POut.String(mobileAppDevice.UniqueID)+"'";
			}
			if(mobileAppDevice.IsEclipboardEnabled != oldMobileAppDevice.IsEclipboardEnabled) {
				if(command!="") { command+=",";}
				command+="IsEclipboardEnabled = "+POut.Bool(mobileAppDevice.IsEclipboardEnabled)+"";
			}
			if(mobileAppDevice.PatNum != oldMobileAppDevice.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(mobileAppDevice.PatNum)+"";
			}
			if(mobileAppDevice.IsBYODDevice != oldMobileAppDevice.IsBYODDevice) {
				if(command!="") { command+=",";}
				command+="IsBYODDevice = "+POut.Bool(mobileAppDevice.IsBYODDevice)+"";
			}
			if(mobileAppDevice.LastCheckInActivity != oldMobileAppDevice.LastCheckInActivity) {
				if(command!="") { command+=",";}
				command+="LastCheckInActivity = "+POut.DateT(mobileAppDevice.LastCheckInActivity)+"";
			}
			if(mobileAppDevice.EclipboardLastAttempt != oldMobileAppDevice.EclipboardLastAttempt) {
				if(command!="") { command+=",";}
				command+="EclipboardLastAttempt = "+POut.DateT(mobileAppDevice.EclipboardLastAttempt)+"";
			}
			if(mobileAppDevice.EclipboardLastLogin != oldMobileAppDevice.EclipboardLastLogin) {
				if(command!="") { command+=",";}
				command+="EclipboardLastLogin = "+POut.DateT(mobileAppDevice.EclipboardLastLogin)+"";
			}
			if(mobileAppDevice.DevicePage != oldMobileAppDevice.DevicePage) {
				if(command!="") { command+=",";}
				command+="DevicePage = "+POut.Int   ((int)mobileAppDevice.DevicePage)+"";
			}
			if(mobileAppDevice.UserNum != oldMobileAppDevice.UserNum) {
				if(command!="") { command+=",";}
				command+="UserNum = "+POut.Long(mobileAppDevice.UserNum)+"";
			}
			if(mobileAppDevice.ODTouchLastLogin != oldMobileAppDevice.ODTouchLastLogin) {
				if(command!="") { command+=",";}
				command+="ODTouchLastLogin = "+POut.DateT(mobileAppDevice.ODTouchLastLogin)+"";
			}
			if(mobileAppDevice.ODTouchLastAttempt != oldMobileAppDevice.ODTouchLastAttempt) {
				if(command!="") { command+=",";}
				command+="ODTouchLastAttempt = "+POut.DateT(mobileAppDevice.ODTouchLastAttempt)+"";
			}
			if(mobileAppDevice.IsODTouchEnabled != oldMobileAppDevice.IsODTouchEnabled) {
				if(command!="") { command+=",";}
				command+="IsODTouchEnabled = "+POut.Bool(mobileAppDevice.IsODTouchEnabled)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE mobileappdevice SET "+command
				+" WHERE MobileAppDeviceNum = "+POut.Long(mobileAppDevice.MobileAppDeviceNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(MobileAppDevice,MobileAppDevice) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(MobileAppDevice mobileAppDevice,MobileAppDevice oldMobileAppDevice) {
			if(mobileAppDevice.ClinicNum != oldMobileAppDevice.ClinicNum) {
				return true;
			}
			if(mobileAppDevice.DeviceName != oldMobileAppDevice.DeviceName) {
				return true;
			}
			if(mobileAppDevice.UniqueID != oldMobileAppDevice.UniqueID) {
				return true;
			}
			if(mobileAppDevice.IsEclipboardEnabled != oldMobileAppDevice.IsEclipboardEnabled) {
				return true;
			}
			if(mobileAppDevice.PatNum != oldMobileAppDevice.PatNum) {
				return true;
			}
			if(mobileAppDevice.IsBYODDevice != oldMobileAppDevice.IsBYODDevice) {
				return true;
			}
			if(mobileAppDevice.LastCheckInActivity != oldMobileAppDevice.LastCheckInActivity) {
				return true;
			}
			if(mobileAppDevice.EclipboardLastAttempt != oldMobileAppDevice.EclipboardLastAttempt) {
				return true;
			}
			if(mobileAppDevice.EclipboardLastLogin != oldMobileAppDevice.EclipboardLastLogin) {
				return true;
			}
			if(mobileAppDevice.DevicePage != oldMobileAppDevice.DevicePage) {
				return true;
			}
			if(mobileAppDevice.UserNum != oldMobileAppDevice.UserNum) {
				return true;
			}
			if(mobileAppDevice.ODTouchLastLogin != oldMobileAppDevice.ODTouchLastLogin) {
				return true;
			}
			if(mobileAppDevice.ODTouchLastAttempt != oldMobileAppDevice.ODTouchLastAttempt) {
				return true;
			}
			if(mobileAppDevice.IsODTouchEnabled != oldMobileAppDevice.IsODTouchEnabled) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one MobileAppDevice from the database.</summary>
		public static void Delete(long mobileAppDeviceNum) {
			string command="DELETE FROM mobileappdevice "
				+"WHERE MobileAppDeviceNum = "+POut.Long(mobileAppDeviceNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many MobileAppDevices from the database.</summary>
		public static void DeleteMany(List<long> listMobileAppDeviceNums) {
			if(listMobileAppDeviceNums==null || listMobileAppDeviceNums.Count==0) {
				return;
			}
			string command="DELETE FROM mobileappdevice "
				+"WHERE MobileAppDeviceNum IN("+string.Join(",",listMobileAppDeviceNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

		///<summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
		public static bool Sync(List<MobileAppDevice> listNew,List<MobileAppDevice> listDB) {
			//Adding items to lists changes the order of operation. All inserts are completed first, then updates, then deletes.
			List<MobileAppDevice> listIns    =new List<MobileAppDevice>();
			List<MobileAppDevice> listUpdNew =new List<MobileAppDevice>();
			List<MobileAppDevice> listUpdDB  =new List<MobileAppDevice>();
			List<MobileAppDevice> listDel    =new List<MobileAppDevice>();
			listNew.Sort((MobileAppDevice x,MobileAppDevice y) => { return x.MobileAppDeviceNum.CompareTo(y.MobileAppDeviceNum); });
			listDB.Sort((MobileAppDevice x,MobileAppDevice y) => { return x.MobileAppDeviceNum.CompareTo(y.MobileAppDeviceNum); });
			int idxNew=0;
			int idxDB=0;
			int rowsUpdatedCount=0;
			MobileAppDevice fieldNew;
			MobileAppDevice fieldDB;
			//Because both lists have been sorted using the same criteria, we can now walk each list to determine which list contians the next element.  The next element is determined by Primary Key.
			//If the New list contains the next item it will be inserted.  If the DB contains the next item, it will be deleted.  If both lists contain the next item, the item will be updated.
			while(idxNew<listNew.Count || idxDB<listDB.Count) {
				fieldNew=null;
				if(idxNew<listNew.Count) {
					fieldNew=listNew[idxNew];
				}
				fieldDB=null;
				if(idxDB<listDB.Count) {
					fieldDB=listDB[idxDB];
				}
				//begin compare
				if(fieldNew!=null && fieldDB==null) {//listNew has more items, listDB does not.
					listIns.Add(fieldNew);
					idxNew++;
					continue;
				}
				else if(fieldNew==null && fieldDB!=null) {//listDB has more items, listNew does not.
					listDel.Add(fieldDB);
					idxDB++;
					continue;
				}
				else if(fieldNew.MobileAppDeviceNum<fieldDB.MobileAppDeviceNum) {//newPK less than dbPK, newItem is 'next'
					listIns.Add(fieldNew);
					idxNew++;
					continue;
				}
				else if(fieldNew.MobileAppDeviceNum>fieldDB.MobileAppDeviceNum) {//dbPK less than newPK, dbItem is 'next'
					listDel.Add(fieldDB);
					idxDB++;
					continue;
				}
				//Both lists contain the 'next' item, update required
				listUpdNew.Add(fieldNew);
				listUpdDB.Add(fieldDB);
				idxNew++;
				idxDB++;
			}
			//Commit changes to DB
			for(int i=0;i<listIns.Count;i++) {
				Insert(listIns[i]);
			}
			for(int i=0;i<listUpdNew.Count;i++) {
				if(Update(listUpdNew[i],listUpdDB[i])) {
					rowsUpdatedCount++;
				}
			}
			DeleteMany(listDel.Select(x => x.MobileAppDeviceNum).ToList());
			if(rowsUpdatedCount>0 || listIns.Count>0 || listDel.Count>0) {
				return true;
			}
			return false;
		}

	}
}