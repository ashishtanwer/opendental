//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class LanguagePatCrud {
		///<summary>Gets one LanguagePat object from the database using the primary key.  Returns null if not found.</summary>
		public static LanguagePat SelectOne(long languagePatNum) {
			string command="SELECT * FROM languagepat "
				+"WHERE LanguagePatNum = "+POut.Long(languagePatNum);
			List<LanguagePat> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one LanguagePat object from the database using a query.</summary>
		public static LanguagePat SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<LanguagePat> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of LanguagePat objects from the database using a query.</summary>
		public static List<LanguagePat> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<LanguagePat> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<LanguagePat> TableToList(DataTable table) {
			List<LanguagePat> retVal=new List<LanguagePat>();
			LanguagePat languagePat;
			foreach(DataRow row in table.Rows) {
				languagePat=new LanguagePat();
				languagePat.LanguagePatNum  = PIn.Long  (row["LanguagePatNum"].ToString());
				languagePat.PrefName        = PIn.String(row["PrefName"].ToString());
				languagePat.Language        = PIn.String(row["Language"].ToString());
				languagePat.Translation     = PIn.String(row["Translation"].ToString());
				languagePat.EFormFieldDefNum= PIn.Long  (row["EFormFieldDefNum"].ToString());
				retVal.Add(languagePat);
			}
			return retVal;
		}

		///<summary>Converts a list of LanguagePat into a DataTable.</summary>
		public static DataTable ListToTable(List<LanguagePat> listLanguagePats,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="LanguagePat";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("LanguagePatNum");
			table.Columns.Add("PrefName");
			table.Columns.Add("Language");
			table.Columns.Add("Translation");
			table.Columns.Add("EFormFieldDefNum");
			foreach(LanguagePat languagePat in listLanguagePats) {
				table.Rows.Add(new object[] {
					POut.Long  (languagePat.LanguagePatNum),
					            languagePat.PrefName,
					            languagePat.Language,
					            languagePat.Translation,
					POut.Long  (languagePat.EFormFieldDefNum),
				});
			}
			return table;
		}

		///<summary>Inserts one LanguagePat into the database.  Returns the new priKey.</summary>
		public static long Insert(LanguagePat languagePat) {
			return Insert(languagePat,false);
		}

		///<summary>Inserts one LanguagePat into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(LanguagePat languagePat,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				languagePat.LanguagePatNum=ReplicationServers.GetKey("languagepat","LanguagePatNum");
			}
			string command="INSERT INTO languagepat (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="LanguagePatNum,";
			}
			command+="PrefName,Language,Translation,EFormFieldDefNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(languagePat.LanguagePatNum)+",";
			}
			command+=
				 "'"+POut.String(languagePat.PrefName)+"',"
				+"'"+POut.String(languagePat.Language)+"',"
				+    DbHelper.ParamChar+"paramTranslation,"
				+    POut.Long  (languagePat.EFormFieldDefNum)+")";
			if(languagePat.Translation==null) {
				languagePat.Translation="";
			}
			OdSqlParameter paramTranslation=new OdSqlParameter("paramTranslation",OdDbType.Text,POut.StringParam(languagePat.Translation));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramTranslation);
			}
			else {
				languagePat.LanguagePatNum=Db.NonQ(command,true,"LanguagePatNum","languagePat",paramTranslation);
			}
			return languagePat.LanguagePatNum;
		}

		///<summary>Inserts one LanguagePat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(LanguagePat languagePat) {
			return InsertNoCache(languagePat,false);
		}

		///<summary>Inserts one LanguagePat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(LanguagePat languagePat,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO languagepat (";
			if(!useExistingPK && isRandomKeys) {
				languagePat.LanguagePatNum=ReplicationServers.GetKeyNoCache("languagepat","LanguagePatNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="LanguagePatNum,";
			}
			command+="PrefName,Language,Translation,EFormFieldDefNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(languagePat.LanguagePatNum)+",";
			}
			command+=
				 "'"+POut.String(languagePat.PrefName)+"',"
				+"'"+POut.String(languagePat.Language)+"',"
				+    DbHelper.ParamChar+"paramTranslation,"
				+    POut.Long  (languagePat.EFormFieldDefNum)+")";
			if(languagePat.Translation==null) {
				languagePat.Translation="";
			}
			OdSqlParameter paramTranslation=new OdSqlParameter("paramTranslation",OdDbType.Text,POut.StringParam(languagePat.Translation));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramTranslation);
			}
			else {
				languagePat.LanguagePatNum=Db.NonQ(command,true,"LanguagePatNum","languagePat",paramTranslation);
			}
			return languagePat.LanguagePatNum;
		}

		///<summary>Updates one LanguagePat in the database.</summary>
		public static void Update(LanguagePat languagePat) {
			string command="UPDATE languagepat SET "
				+"PrefName        = '"+POut.String(languagePat.PrefName)+"', "
				+"Language        = '"+POut.String(languagePat.Language)+"', "
				+"Translation     =  "+DbHelper.ParamChar+"paramTranslation, "
				+"EFormFieldDefNum=  "+POut.Long  (languagePat.EFormFieldDefNum)+" "
				+"WHERE LanguagePatNum = "+POut.Long(languagePat.LanguagePatNum);
			if(languagePat.Translation==null) {
				languagePat.Translation="";
			}
			OdSqlParameter paramTranslation=new OdSqlParameter("paramTranslation",OdDbType.Text,POut.StringParam(languagePat.Translation));
			Db.NonQ(command,paramTranslation);
		}

		///<summary>Updates one LanguagePat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(LanguagePat languagePat,LanguagePat oldLanguagePat) {
			string command="";
			if(languagePat.PrefName != oldLanguagePat.PrefName) {
				if(command!="") { command+=",";}
				command+="PrefName = '"+POut.String(languagePat.PrefName)+"'";
			}
			if(languagePat.Language != oldLanguagePat.Language) {
				if(command!="") { command+=",";}
				command+="Language = '"+POut.String(languagePat.Language)+"'";
			}
			if(languagePat.Translation != oldLanguagePat.Translation) {
				if(command!="") { command+=",";}
				command+="Translation = "+DbHelper.ParamChar+"paramTranslation";
			}
			if(languagePat.EFormFieldDefNum != oldLanguagePat.EFormFieldDefNum) {
				if(command!="") { command+=",";}
				command+="EFormFieldDefNum = "+POut.Long(languagePat.EFormFieldDefNum)+"";
			}
			if(command=="") {
				return false;
			}
			if(languagePat.Translation==null) {
				languagePat.Translation="";
			}
			OdSqlParameter paramTranslation=new OdSqlParameter("paramTranslation",OdDbType.Text,POut.StringParam(languagePat.Translation));
			command="UPDATE languagepat SET "+command
				+" WHERE LanguagePatNum = "+POut.Long(languagePat.LanguagePatNum);
			Db.NonQ(command,paramTranslation);
			return true;
		}

		///<summary>Returns true if Update(LanguagePat,LanguagePat) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(LanguagePat languagePat,LanguagePat oldLanguagePat) {
			if(languagePat.PrefName != oldLanguagePat.PrefName) {
				return true;
			}
			if(languagePat.Language != oldLanguagePat.Language) {
				return true;
			}
			if(languagePat.Translation != oldLanguagePat.Translation) {
				return true;
			}
			if(languagePat.EFormFieldDefNum != oldLanguagePat.EFormFieldDefNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one LanguagePat from the database.</summary>
		public static void Delete(long languagePatNum) {
			string command="DELETE FROM languagepat "
				+"WHERE LanguagePatNum = "+POut.Long(languagePatNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many LanguagePats from the database.</summary>
		public static void DeleteMany(List<long> listLanguagePatNums) {
			if(listLanguagePatNums==null || listLanguagePatNums.Count==0) {
				return;
			}
			string command="DELETE FROM languagepat "
				+"WHERE LanguagePatNum IN("+string.Join(",",listLanguagePatNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}