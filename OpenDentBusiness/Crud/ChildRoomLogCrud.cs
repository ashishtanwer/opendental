//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ChildRoomLogCrud {
		///<summary>Gets one ChildRoomLog object from the database using the primary key.  Returns null if not found.</summary>
		public static ChildRoomLog SelectOne(long childRoomLogNum) {
			string command="SELECT * FROM childroomlog "
				+"WHERE ChildRoomLogNum = "+POut.Long(childRoomLogNum);
			List<ChildRoomLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ChildRoomLog object from the database using a query.</summary>
		public static ChildRoomLog SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildRoomLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ChildRoomLog objects from the database using a query.</summary>
		public static List<ChildRoomLog> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildRoomLog> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ChildRoomLog> TableToList(DataTable table) {
			List<ChildRoomLog> retVal=new List<ChildRoomLog>();
			ChildRoomLog childRoomLog;
			foreach(DataRow row in table.Rows) {
				childRoomLog=new ChildRoomLog();
				childRoomLog.ChildRoomLogNum= PIn.Long  (row["ChildRoomLogNum"].ToString());
				childRoomLog.DateTEntered   = PIn.DateT (row["DateTEntered"].ToString());
				childRoomLog.DateTDisplayed = PIn.DateT (row["DateTDisplayed"].ToString());
				childRoomLog.ChildNum       = PIn.Long  (row["ChildNum"].ToString());
				childRoomLog.EmployeeNum    = PIn.Long  (row["EmployeeNum"].ToString());
				childRoomLog.IsComing       = PIn.Bool  (row["IsComing"].ToString());
				childRoomLog.ChildRoomNum   = PIn.Long  (row["ChildRoomNum"].ToString());
				childRoomLog.RatioChange    = PIn.Double(row["RatioChange"].ToString());
				retVal.Add(childRoomLog);
			}
			return retVal;
		}

		///<summary>Converts a list of ChildRoomLog into a DataTable.</summary>
		public static DataTable ListToTable(List<ChildRoomLog> listChildRoomLogs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ChildRoomLog";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ChildRoomLogNum");
			table.Columns.Add("DateTEntered");
			table.Columns.Add("DateTDisplayed");
			table.Columns.Add("ChildNum");
			table.Columns.Add("EmployeeNum");
			table.Columns.Add("IsComing");
			table.Columns.Add("ChildRoomNum");
			table.Columns.Add("RatioChange");
			foreach(ChildRoomLog childRoomLog in listChildRoomLogs) {
				table.Rows.Add(new object[] {
					POut.Long  (childRoomLog.ChildRoomLogNum),
					POut.DateT (childRoomLog.DateTEntered,false),
					POut.DateT (childRoomLog.DateTDisplayed,false),
					POut.Long  (childRoomLog.ChildNum),
					POut.Long  (childRoomLog.EmployeeNum),
					POut.Bool  (childRoomLog.IsComing),
					POut.Long  (childRoomLog.ChildRoomNum),
					POut.Double(childRoomLog.RatioChange),
				});
			}
			return table;
		}

		///<summary>Inserts one ChildRoomLog into the database.  Returns the new priKey.</summary>
		public static long Insert(ChildRoomLog childRoomLog) {
			return Insert(childRoomLog,false);
		}

		///<summary>Inserts one ChildRoomLog into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ChildRoomLog childRoomLog,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				childRoomLog.ChildRoomLogNum=ReplicationServers.GetKey("childroomlog","ChildRoomLogNum");
			}
			string command="INSERT INTO childroomlog (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ChildRoomLogNum,";
			}
			command+="DateTEntered,DateTDisplayed,ChildNum,EmployeeNum,IsComing,ChildRoomNum,RatioChange) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(childRoomLog.ChildRoomLogNum)+",";
			}
			command+=
				     POut.DateT (childRoomLog.DateTEntered)+","
				+    POut.DateT (childRoomLog.DateTDisplayed)+","
				+    POut.Long  (childRoomLog.ChildNum)+","
				+    POut.Long  (childRoomLog.EmployeeNum)+","
				+    POut.Bool  (childRoomLog.IsComing)+","
				+    POut.Long  (childRoomLog.ChildRoomNum)+","
				+		 POut.Double(childRoomLog.RatioChange)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				childRoomLog.ChildRoomLogNum=Db.NonQ(command,true,"ChildRoomLogNum","childRoomLog");
			}
			return childRoomLog.ChildRoomLogNum;
		}

		///<summary>Inserts one ChildRoomLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildRoomLog childRoomLog) {
			return InsertNoCache(childRoomLog,false);
		}

		///<summary>Inserts one ChildRoomLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildRoomLog childRoomLog,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO childroomlog (";
			if(!useExistingPK && isRandomKeys) {
				childRoomLog.ChildRoomLogNum=ReplicationServers.GetKeyNoCache("childroomlog","ChildRoomLogNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ChildRoomLogNum,";
			}
			command+="DateTEntered,DateTDisplayed,ChildNum,EmployeeNum,IsComing,ChildRoomNum,RatioChange) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(childRoomLog.ChildRoomLogNum)+",";
			}
			command+=
				     POut.DateT (childRoomLog.DateTEntered)+","
				+    POut.DateT (childRoomLog.DateTDisplayed)+","
				+    POut.Long  (childRoomLog.ChildNum)+","
				+    POut.Long  (childRoomLog.EmployeeNum)+","
				+    POut.Bool  (childRoomLog.IsComing)+","
				+    POut.Long  (childRoomLog.ChildRoomNum)+","
				+	   POut.Double(childRoomLog.RatioChange)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				childRoomLog.ChildRoomLogNum=Db.NonQ(command,true,"ChildRoomLogNum","childRoomLog");
			}
			return childRoomLog.ChildRoomLogNum;
		}

		///<summary>Updates one ChildRoomLog in the database.</summary>
		public static void Update(ChildRoomLog childRoomLog) {
			string command="UPDATE childroomlog SET "
				+"DateTEntered   =  "+POut.DateT (childRoomLog.DateTEntered)+", "
				+"DateTDisplayed =  "+POut.DateT (childRoomLog.DateTDisplayed)+", "
				+"ChildNum       =  "+POut.Long  (childRoomLog.ChildNum)+", "
				+"EmployeeNum    =  "+POut.Long  (childRoomLog.EmployeeNum)+", "
				+"IsComing       =  "+POut.Bool  (childRoomLog.IsComing)+", "
				+"ChildRoomNum   =  "+POut.Long  (childRoomLog.ChildRoomNum)+", "
				+"RatioChange    =  "+POut.Double(childRoomLog.RatioChange)+" "
				+"WHERE ChildRoomLogNum = "+POut.Long(childRoomLog.ChildRoomLogNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ChildRoomLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ChildRoomLog childRoomLog,ChildRoomLog oldChildRoomLog) {
			string command="";
			if(childRoomLog.DateTEntered != oldChildRoomLog.DateTEntered) {
				if(command!="") { command+=",";}
				command+="DateTEntered = "+POut.DateT(childRoomLog.DateTEntered)+"";
			}
			if(childRoomLog.DateTDisplayed != oldChildRoomLog.DateTDisplayed) {
				if(command!="") { command+=",";}
				command+="DateTDisplayed = "+POut.DateT(childRoomLog.DateTDisplayed)+"";
			}
			if(childRoomLog.ChildNum != oldChildRoomLog.ChildNum) {
				if(command!="") { command+=",";}
				command+="ChildNum = "+POut.Long(childRoomLog.ChildNum)+"";
			}
			if(childRoomLog.EmployeeNum != oldChildRoomLog.EmployeeNum) {
				if(command!="") { command+=",";}
				command+="EmployeeNum = "+POut.Long(childRoomLog.EmployeeNum)+"";
			}
			if(childRoomLog.IsComing != oldChildRoomLog.IsComing) {
				if(command!="") { command+=",";}
				command+="IsComing = "+POut.Bool(childRoomLog.IsComing)+"";
			}
			if(childRoomLog.ChildRoomNum != oldChildRoomLog.ChildRoomNum) {
				if(command!="") { command+=",";}
				command+="ChildRoomNum = "+POut.Long(childRoomLog.ChildRoomNum)+"";
			}
			if(childRoomLog.RatioChange != oldChildRoomLog.RatioChange) {
				if(command!="") { command+=",";}
				command+="RatioChange = "+POut.Double(childRoomLog.RatioChange)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE childroomlog SET "+command
				+" WHERE ChildRoomLogNum = "+POut.Long(childRoomLog.ChildRoomLogNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ChildRoomLog,ChildRoomLog) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ChildRoomLog childRoomLog,ChildRoomLog oldChildRoomLog) {
			if(childRoomLog.DateTEntered != oldChildRoomLog.DateTEntered) {
				return true;
			}
			if(childRoomLog.DateTDisplayed != oldChildRoomLog.DateTDisplayed) {
				return true;
			}
			if(childRoomLog.ChildNum != oldChildRoomLog.ChildNum) {
				return true;
			}
			if(childRoomLog.EmployeeNum != oldChildRoomLog.EmployeeNum) {
				return true;
			}
			if(childRoomLog.IsComing != oldChildRoomLog.IsComing) {
				return true;
			}
			if(childRoomLog.ChildRoomNum != oldChildRoomLog.ChildRoomNum) {
				return true;
			}
			if(childRoomLog.RatioChange != oldChildRoomLog.RatioChange) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ChildRoomLog from the database.</summary>
		public static void Delete(long childRoomLogNum) {
			string command="DELETE FROM childroomlog "
				+"WHERE ChildRoomLogNum = "+POut.Long(childRoomLogNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ChildRoomLogs from the database.</summary>
		public static void DeleteMany(List<long> listChildRoomLogNums) {
			if(listChildRoomLogNums==null || listChildRoomLogNums.Count==0) {
				return;
			}
			string command="DELETE FROM childroomlog "
				+"WHERE ChildRoomLogNum IN("+string.Join(",",listChildRoomLogNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}