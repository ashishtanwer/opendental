//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class OrthoRxCrud {
		///<summary>Gets one OrthoRx object from the database using the primary key.  Returns null if not found.</summary>
		public static OrthoRx SelectOne(long orthoRxNum) {
			string command="SELECT * FROM orthorx "
				+"WHERE OrthoRxNum = "+POut.Long(orthoRxNum);
			List<OrthoRx> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one OrthoRx object from the database using a query.</summary>
		public static OrthoRx SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrthoRx> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of OrthoRx objects from the database using a query.</summary>
		public static List<OrthoRx> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrthoRx> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<OrthoRx> TableToList(DataTable table) {
			List<OrthoRx> retVal=new List<OrthoRx>();
			OrthoRx orthoRx;
			foreach(DataRow row in table.Rows) {
				orthoRx=new OrthoRx();
				orthoRx.OrthoRxNum          = PIn.Long  (row["OrthoRxNum"].ToString());
				orthoRx.OrthoHardwareSpecNum= PIn.Long  (row["OrthoHardwareSpecNum"].ToString());
				orthoRx.Description         = PIn.String(row["Description"].ToString());
				orthoRx.ToothRange          = PIn.String(row["ToothRange"].ToString());
				orthoRx.ItemOrder           = PIn.Int   (row["ItemOrder"].ToString());
				retVal.Add(orthoRx);
			}
			return retVal;
		}

		///<summary>Converts a list of OrthoRx into a DataTable.</summary>
		public static DataTable ListToTable(List<OrthoRx> listOrthoRxs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="OrthoRx";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("OrthoRxNum");
			table.Columns.Add("OrthoHardwareSpecNum");
			table.Columns.Add("Description");
			table.Columns.Add("ToothRange");
			table.Columns.Add("ItemOrder");
			foreach(OrthoRx orthoRx in listOrthoRxs) {
				table.Rows.Add(new object[] {
					POut.Long  (orthoRx.OrthoRxNum),
					POut.Long  (orthoRx.OrthoHardwareSpecNum),
					            orthoRx.Description,
					            orthoRx.ToothRange,
					POut.Int   (orthoRx.ItemOrder),
				});
			}
			return table;
		}

		///<summary>Inserts one OrthoRx into the database.  Returns the new priKey.</summary>
		public static long Insert(OrthoRx orthoRx) {
			return Insert(orthoRx,false);
		}

		///<summary>Inserts one OrthoRx into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(OrthoRx orthoRx,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				orthoRx.OrthoRxNum=ReplicationServers.GetKey("orthorx","OrthoRxNum");
			}
			string command="INSERT INTO orthorx (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="OrthoRxNum,";
			}
			command+="OrthoHardwareSpecNum,Description,ToothRange,ItemOrder) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(orthoRx.OrthoRxNum)+",";
			}
			command+=
				     POut.Long  (orthoRx.OrthoHardwareSpecNum)+","
				+"'"+POut.String(orthoRx.Description)+"',"
				+"'"+POut.String(orthoRx.ToothRange)+"',"
				+    POut.Int   (orthoRx.ItemOrder)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				orthoRx.OrthoRxNum=Db.NonQ(command,true,"OrthoRxNum","orthoRx");
			}
			return orthoRx.OrthoRxNum;
		}

		///<summary>Inserts one OrthoRx into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(OrthoRx orthoRx) {
			return InsertNoCache(orthoRx,false);
		}

		///<summary>Inserts one OrthoRx into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(OrthoRx orthoRx,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO orthorx (";
			if(!useExistingPK && isRandomKeys) {
				orthoRx.OrthoRxNum=ReplicationServers.GetKeyNoCache("orthorx","OrthoRxNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="OrthoRxNum,";
			}
			command+="OrthoHardwareSpecNum,Description,ToothRange,ItemOrder) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(orthoRx.OrthoRxNum)+",";
			}
			command+=
				     POut.Long  (orthoRx.OrthoHardwareSpecNum)+","
				+"'"+POut.String(orthoRx.Description)+"',"
				+"'"+POut.String(orthoRx.ToothRange)+"',"
				+    POut.Int   (orthoRx.ItemOrder)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				orthoRx.OrthoRxNum=Db.NonQ(command,true,"OrthoRxNum","orthoRx");
			}
			return orthoRx.OrthoRxNum;
		}

		///<summary>Updates one OrthoRx in the database.</summary>
		public static void Update(OrthoRx orthoRx) {
			string command="UPDATE orthorx SET "
				+"OrthoHardwareSpecNum=  "+POut.Long  (orthoRx.OrthoHardwareSpecNum)+", "
				+"Description         = '"+POut.String(orthoRx.Description)+"', "
				+"ToothRange          = '"+POut.String(orthoRx.ToothRange)+"', "
				+"ItemOrder           =  "+POut.Int   (orthoRx.ItemOrder)+" "
				+"WHERE OrthoRxNum = "+POut.Long(orthoRx.OrthoRxNum);
			Db.NonQ(command);
		}

		///<summary>Updates one OrthoRx in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(OrthoRx orthoRx,OrthoRx oldOrthoRx) {
			string command="";
			if(orthoRx.OrthoHardwareSpecNum != oldOrthoRx.OrthoHardwareSpecNum) {
				if(command!="") { command+=",";}
				command+="OrthoHardwareSpecNum = "+POut.Long(orthoRx.OrthoHardwareSpecNum)+"";
			}
			if(orthoRx.Description != oldOrthoRx.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(orthoRx.Description)+"'";
			}
			if(orthoRx.ToothRange != oldOrthoRx.ToothRange) {
				if(command!="") { command+=",";}
				command+="ToothRange = '"+POut.String(orthoRx.ToothRange)+"'";
			}
			if(orthoRx.ItemOrder != oldOrthoRx.ItemOrder) {
				if(command!="") { command+=",";}
				command+="ItemOrder = "+POut.Int(orthoRx.ItemOrder)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE orthorx SET "+command
				+" WHERE OrthoRxNum = "+POut.Long(orthoRx.OrthoRxNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(OrthoRx,OrthoRx) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(OrthoRx orthoRx,OrthoRx oldOrthoRx) {
			if(orthoRx.OrthoHardwareSpecNum != oldOrthoRx.OrthoHardwareSpecNum) {
				return true;
			}
			if(orthoRx.Description != oldOrthoRx.Description) {
				return true;
			}
			if(orthoRx.ToothRange != oldOrthoRx.ToothRange) {
				return true;
			}
			if(orthoRx.ItemOrder != oldOrthoRx.ItemOrder) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one OrthoRx from the database.</summary>
		public static void Delete(long orthoRxNum) {
			string command="DELETE FROM orthorx "
				+"WHERE OrthoRxNum = "+POut.Long(orthoRxNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many OrthoRxs from the database.</summary>
		public static void DeleteMany(List<long> listOrthoRxNums) {
			if(listOrthoRxNums==null || listOrthoRxNums.Count==0) {
				return;
			}
			string command="DELETE FROM orthorx "
				+"WHERE OrthoRxNum IN("+string.Join(",",listOrthoRxNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}