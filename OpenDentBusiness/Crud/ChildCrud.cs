//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ChildCrud {
		///<summary>Gets one Child object from the database using the primary key.  Returns null if not found.</summary>
		public static Child SelectOne(long childNum) {
			string command="SELECT * FROM child "
				+"WHERE ChildNum = "+POut.Long(childNum);
			List<Child> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Child object from the database using a query.</summary>
		public static Child SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Child> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Child objects from the database using a query.</summary>
		public static List<Child> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Child> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Child> TableToList(DataTable table) {
			List<Child> retVal=new List<Child>();
			Child child;
			foreach(DataRow row in table.Rows) {
				child=new Child();
				child.ChildNum           = PIn.Long  (row["ChildNum"].ToString());
				child.ChildRoomNumPrimary= PIn.Long  (row["ChildRoomNumPrimary"].ToString());
				child.FName              = PIn.String(row["FName"].ToString());
				child.LName              = PIn.String(row["LName"].ToString());
				child.BirthDate          = PIn.Date  (row["BirthDate"].ToString());
				child.Notes              = PIn.String(row["Notes"].ToString());
				child.BadgeId            = PIn.String(row["BadgeId"].ToString());
				child.IsHidden           = PIn.Bool  (row["IsHidden"].ToString());
				retVal.Add(child);
			}
			return retVal;
		}

		///<summary>Converts a list of Child into a DataTable.</summary>
		public static DataTable ListToTable(List<Child> listChilds,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Child";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ChildNum");
			table.Columns.Add("ChildRoomNumPrimary");
			table.Columns.Add("FName");
			table.Columns.Add("LName");
			table.Columns.Add("BirthDate");
			table.Columns.Add("Notes");
			table.Columns.Add("BadgeId");
			table.Columns.Add("IsHidden");
			foreach(Child child in listChilds) {
				table.Rows.Add(new object[] {
					POut.Long  (child.ChildNum),
					POut.Long  (child.ChildRoomNumPrimary),
					            child.FName,
					            child.LName,
					POut.DateT (child.BirthDate,false),
					            child.Notes,
					            child.BadgeId,
					POut.Bool  (child.IsHidden),
				});
			}
			return table;
		}

		///<summary>Inserts one Child into the database.  Returns the new priKey.</summary>
		public static long Insert(Child child) {
			return Insert(child,false);
		}

		///<summary>Inserts one Child into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Child child,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				child.ChildNum=ReplicationServers.GetKey("child","ChildNum");
			}
			string command="INSERT INTO child (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ChildNum,";
			}
			command+="ChildRoomNumPrimary,FName,LName,BirthDate,Notes,BadgeId,IsHidden) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(child.ChildNum)+",";
			}
			command+=
				     POut.Long  (child.ChildRoomNumPrimary)+","
				+"'"+POut.String(child.FName)+"',"
				+"'"+POut.String(child.LName)+"',"
				+    POut.Date  (child.BirthDate)+","
				+"'"+POut.String(child.Notes)+"',"
				+"'"+POut.String(child.BadgeId)+"',"
				+    POut.Bool  (child.IsHidden)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				child.ChildNum=Db.NonQ(command,true,"ChildNum","child");
			}
			return child.ChildNum;
		}

		///<summary>Inserts one Child into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Child child) {
			return InsertNoCache(child,false);
		}

		///<summary>Inserts one Child into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Child child,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO child (";
			if(!useExistingPK && isRandomKeys) {
				child.ChildNum=ReplicationServers.GetKeyNoCache("child","ChildNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ChildNum,";
			}
			command+="ChildRoomNumPrimary,FName,LName,BirthDate,Notes,BadgeId,IsHidden) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(child.ChildNum)+",";
			}
			command+=
				     POut.Long  (child.ChildRoomNumPrimary)+","
				+"'"+POut.String(child.FName)+"',"
				+"'"+POut.String(child.LName)+"',"
				+    POut.Date  (child.BirthDate)+","
				+"'"+POut.String(child.Notes)+"',"
				+"'"+POut.String(child.BadgeId)+"',"
				+    POut.Bool  (child.IsHidden)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				child.ChildNum=Db.NonQ(command,true,"ChildNum","child");
			}
			return child.ChildNum;
		}

		///<summary>Updates one Child in the database.</summary>
		public static void Update(Child child) {
			string command="UPDATE child SET "
				+"ChildRoomNumPrimary=  "+POut.Long  (child.ChildRoomNumPrimary)+", "
				+"FName              = '"+POut.String(child.FName)+"', "
				+"LName              = '"+POut.String(child.LName)+"', "
				+"BirthDate          =  "+POut.Date  (child.BirthDate)+", "
				+"Notes              = '"+POut.String(child.Notes)+"', "
				+"BadgeId            = '"+POut.String(child.BadgeId)+"', "
				+"IsHidden           =  "+POut.Bool  (child.IsHidden)+" "
				+"WHERE ChildNum = "+POut.Long(child.ChildNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Child in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Child child,Child oldChild) {
			string command="";
			if(child.ChildRoomNumPrimary != oldChild.ChildRoomNumPrimary) {
				if(command!="") { command+=",";}
				command+="ChildRoomNumPrimary = "+POut.Long(child.ChildRoomNumPrimary)+"";
			}
			if(child.FName != oldChild.FName) {
				if(command!="") { command+=",";}
				command+="FName = '"+POut.String(child.FName)+"'";
			}
			if(child.LName != oldChild.LName) {
				if(command!="") { command+=",";}
				command+="LName = '"+POut.String(child.LName)+"'";
			}
			if(child.BirthDate.Date != oldChild.BirthDate.Date) {
				if(command!="") { command+=",";}
				command+="BirthDate = "+POut.Date(child.BirthDate)+"";
			}
			if(child.Notes != oldChild.Notes) {
				if(command!="") { command+=",";}
				command+="Notes = '"+POut.String(child.Notes)+"'";
			}
			if(child.BadgeId != oldChild.BadgeId) {
				if(command!="") { command+=",";}
				command+="BadgeId = '"+POut.String(child.BadgeId)+"'";
			}
			if(child.IsHidden != oldChild.IsHidden) {
				if(command!="") { command+=",";}
				command+="IsHidden = "+POut.Bool(child.IsHidden)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE child SET "+command
				+" WHERE ChildNum = "+POut.Long(child.ChildNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(Child,Child) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Child child,Child oldChild) {
			if(child.ChildRoomNumPrimary != oldChild.ChildRoomNumPrimary) {
				return true;
			}
			if(child.FName != oldChild.FName) {
				return true;
			}
			if(child.LName != oldChild.LName) {
				return true;
			}
			if(child.BirthDate.Date != oldChild.BirthDate.Date) {
				return true;
			}
			if(child.Notes != oldChild.Notes) {
				return true;
			}
			if(child.BadgeId != oldChild.BadgeId) {
				return true;
			}
			if(child.IsHidden != oldChild.IsHidden) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Child from the database.</summary>
		public static void Delete(long childNum) {
			string command="DELETE FROM child "
				+"WHERE ChildNum = "+POut.Long(childNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many Childs from the database.</summary>
		public static void DeleteMany(List<long> listChildNums) {
			if(listChildNums==null || listChildNums.Count==0) {
				return;
			}
			string command="DELETE FROM child "
				+"WHERE ChildNum IN("+string.Join(",",listChildNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}