//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class MobileNotificationCrud {
		///<summary>Gets one MobileNotification object from the database using the primary key.  Returns null if not found.</summary>
		public static MobileNotification SelectOne(long mobileNotificationNum) {
			string command="SELECT * FROM mobilenotification "
				+"WHERE MobileNotificationNum = "+POut.Long(mobileNotificationNum);
			List<MobileNotification> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MobileNotification object from the database using a query.</summary>
		public static MobileNotification SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MobileNotification> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of MobileNotification objects from the database using a query.</summary>
		public static List<MobileNotification> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MobileNotification> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<MobileNotification> TableToList(DataTable table) {
			List<MobileNotification> retVal=new List<MobileNotification>();
			MobileNotification mobileNotification;
			foreach(DataRow row in table.Rows) {
				mobileNotification=new MobileNotification();
				mobileNotification.MobileNotificationNum= PIn.Long  (row["MobileNotificationNum"].ToString());
				mobileNotification.NotificationType     = (OpenDentBusiness.MobileNotificationType)PIn.Int(row["NotificationType"].ToString());
				mobileNotification.DeviceId             = PIn.String(row["DeviceId"].ToString());
				mobileNotification.PrimaryKeys          = PIn.String(row["PrimaryKeys"].ToString());
				mobileNotification.Tags                 = PIn.String(row["Tags"].ToString());
				mobileNotification.DateTimeEntry        = PIn.DateT (row["DateTimeEntry"].ToString());
				mobileNotification.DateTimeExpires      = PIn.DateT (row["DateTimeExpires"].ToString());
				mobileNotification.AppTarget            = (OpenDentBusiness.EnumAppTarget)PIn.Int(row["AppTarget"].ToString());
				retVal.Add(mobileNotification);
			}
			return retVal;
		}

		///<summary>Converts a list of MobileNotification into a DataTable.</summary>
		public static DataTable ListToTable(List<MobileNotification> listMobileNotifications,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="MobileNotification";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("MobileNotificationNum");
			table.Columns.Add("NotificationType");
			table.Columns.Add("DeviceId");
			table.Columns.Add("PrimaryKeys");
			table.Columns.Add("Tags");
			table.Columns.Add("DateTimeEntry");
			table.Columns.Add("DateTimeExpires");
			table.Columns.Add("AppTarget");
			foreach(MobileNotification mobileNotification in listMobileNotifications) {
				table.Rows.Add(new object[] {
					POut.Long  (mobileNotification.MobileNotificationNum),
					POut.Int   ((int)mobileNotification.NotificationType),
					            mobileNotification.DeviceId,
					            mobileNotification.PrimaryKeys,
					            mobileNotification.Tags,
					POut.DateT (mobileNotification.DateTimeEntry,false),
					POut.DateT (mobileNotification.DateTimeExpires,false),
					POut.Int   ((int)mobileNotification.AppTarget),
				});
			}
			return table;
		}

		///<summary>Inserts one MobileNotification into the database.  Returns the new priKey.</summary>
		public static long Insert(MobileNotification mobileNotification) {
			return Insert(mobileNotification,false);
		}

		///<summary>Inserts one MobileNotification into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(MobileNotification mobileNotification,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				mobileNotification.MobileNotificationNum=ReplicationServers.GetKey("mobilenotification","MobileNotificationNum");
			}
			string command="INSERT INTO mobilenotification (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="MobileNotificationNum,";
			}
			command+="NotificationType,DeviceId,PrimaryKeys,Tags,DateTimeEntry,DateTimeExpires,AppTarget) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(mobileNotification.MobileNotificationNum)+",";
			}
			command+=
				     POut.Int   ((int)mobileNotification.NotificationType)+","
				+"'"+POut.String(mobileNotification.DeviceId)+"',"
				+    DbHelper.ParamChar+"paramPrimaryKeys,"
				+    DbHelper.ParamChar+"paramTags,"
				+    POut.DateT (mobileNotification.DateTimeEntry)+","
				+    POut.DateT (mobileNotification.DateTimeExpires)+","
				+    POut.Int   ((int)mobileNotification.AppTarget)+")";
			if(mobileNotification.PrimaryKeys==null) {
				mobileNotification.PrimaryKeys="";
			}
			OdSqlParameter paramPrimaryKeys=new OdSqlParameter("paramPrimaryKeys",OdDbType.Text,POut.StringParam(mobileNotification.PrimaryKeys));
			if(mobileNotification.Tags==null) {
				mobileNotification.Tags="";
			}
			OdSqlParameter paramTags=new OdSqlParameter("paramTags",OdDbType.Text,POut.StringParam(mobileNotification.Tags));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramPrimaryKeys,paramTags);
			}
			else {
				mobileNotification.MobileNotificationNum=Db.NonQ(command,true,"MobileNotificationNum","mobileNotification",paramPrimaryKeys,paramTags);
			}
			return mobileNotification.MobileNotificationNum;
		}

		///<summary>Inserts one MobileNotification into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MobileNotification mobileNotification) {
			return InsertNoCache(mobileNotification,false);
		}

		///<summary>Inserts one MobileNotification into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MobileNotification mobileNotification,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO mobilenotification (";
			if(!useExistingPK && isRandomKeys) {
				mobileNotification.MobileNotificationNum=ReplicationServers.GetKeyNoCache("mobilenotification","MobileNotificationNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="MobileNotificationNum,";
			}
			command+="NotificationType,DeviceId,PrimaryKeys,Tags,DateTimeEntry,DateTimeExpires,AppTarget) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(mobileNotification.MobileNotificationNum)+",";
			}
			command+=
				     POut.Int   ((int)mobileNotification.NotificationType)+","
				+"'"+POut.String(mobileNotification.DeviceId)+"',"
				+    DbHelper.ParamChar+"paramPrimaryKeys,"
				+    DbHelper.ParamChar+"paramTags,"
				+    POut.DateT (mobileNotification.DateTimeEntry)+","
				+    POut.DateT (mobileNotification.DateTimeExpires)+","
				+    POut.Int   ((int)mobileNotification.AppTarget)+")";
			if(mobileNotification.PrimaryKeys==null) {
				mobileNotification.PrimaryKeys="";
			}
			OdSqlParameter paramPrimaryKeys=new OdSqlParameter("paramPrimaryKeys",OdDbType.Text,POut.StringParam(mobileNotification.PrimaryKeys));
			if(mobileNotification.Tags==null) {
				mobileNotification.Tags="";
			}
			OdSqlParameter paramTags=new OdSqlParameter("paramTags",OdDbType.Text,POut.StringParam(mobileNotification.Tags));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramPrimaryKeys,paramTags);
			}
			else {
				mobileNotification.MobileNotificationNum=Db.NonQ(command,true,"MobileNotificationNum","mobileNotification",paramPrimaryKeys,paramTags);
			}
			return mobileNotification.MobileNotificationNum;
		}

		///<summary>Updates one MobileNotification in the database.</summary>
		public static void Update(MobileNotification mobileNotification) {
			string command="UPDATE mobilenotification SET "
				+"NotificationType     =  "+POut.Int   ((int)mobileNotification.NotificationType)+", "
				+"DeviceId             = '"+POut.String(mobileNotification.DeviceId)+"', "
				+"PrimaryKeys          =  "+DbHelper.ParamChar+"paramPrimaryKeys, "
				+"Tags                 =  "+DbHelper.ParamChar+"paramTags, "
				+"DateTimeEntry        =  "+POut.DateT (mobileNotification.DateTimeEntry)+", "
				+"DateTimeExpires      =  "+POut.DateT (mobileNotification.DateTimeExpires)+", "
				+"AppTarget            =  "+POut.Int   ((int)mobileNotification.AppTarget)+" "
				+"WHERE MobileNotificationNum = "+POut.Long(mobileNotification.MobileNotificationNum);
			if(mobileNotification.PrimaryKeys==null) {
				mobileNotification.PrimaryKeys="";
			}
			OdSqlParameter paramPrimaryKeys=new OdSqlParameter("paramPrimaryKeys",OdDbType.Text,POut.StringParam(mobileNotification.PrimaryKeys));
			if(mobileNotification.Tags==null) {
				mobileNotification.Tags="";
			}
			OdSqlParameter paramTags=new OdSqlParameter("paramTags",OdDbType.Text,POut.StringParam(mobileNotification.Tags));
			Db.NonQ(command,paramPrimaryKeys,paramTags);
		}

		///<summary>Updates one MobileNotification in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(MobileNotification mobileNotification,MobileNotification oldMobileNotification) {
			string command="";
			if(mobileNotification.NotificationType != oldMobileNotification.NotificationType) {
				if(command!="") { command+=",";}
				command+="NotificationType = "+POut.Int   ((int)mobileNotification.NotificationType)+"";
			}
			if(mobileNotification.DeviceId != oldMobileNotification.DeviceId) {
				if(command!="") { command+=",";}
				command+="DeviceId = '"+POut.String(mobileNotification.DeviceId)+"'";
			}
			if(mobileNotification.PrimaryKeys != oldMobileNotification.PrimaryKeys) {
				if(command!="") { command+=",";}
				command+="PrimaryKeys = "+DbHelper.ParamChar+"paramPrimaryKeys";
			}
			if(mobileNotification.Tags != oldMobileNotification.Tags) {
				if(command!="") { command+=",";}
				command+="Tags = "+DbHelper.ParamChar+"paramTags";
			}
			if(mobileNotification.DateTimeEntry != oldMobileNotification.DateTimeEntry) {
				if(command!="") { command+=",";}
				command+="DateTimeEntry = "+POut.DateT(mobileNotification.DateTimeEntry)+"";
			}
			if(mobileNotification.DateTimeExpires != oldMobileNotification.DateTimeExpires) {
				if(command!="") { command+=",";}
				command+="DateTimeExpires = "+POut.DateT(mobileNotification.DateTimeExpires)+"";
			}
			if(mobileNotification.AppTarget != oldMobileNotification.AppTarget) {
				if(command!="") { command+=",";}
				command+="AppTarget = "+POut.Int   ((int)mobileNotification.AppTarget)+"";
			}
			if(command=="") {
				return false;
			}
			if(mobileNotification.PrimaryKeys==null) {
				mobileNotification.PrimaryKeys="";
			}
			OdSqlParameter paramPrimaryKeys=new OdSqlParameter("paramPrimaryKeys",OdDbType.Text,POut.StringParam(mobileNotification.PrimaryKeys));
			if(mobileNotification.Tags==null) {
				mobileNotification.Tags="";
			}
			OdSqlParameter paramTags=new OdSqlParameter("paramTags",OdDbType.Text,POut.StringParam(mobileNotification.Tags));
			command="UPDATE mobilenotification SET "+command
				+" WHERE MobileNotificationNum = "+POut.Long(mobileNotification.MobileNotificationNum);
			Db.NonQ(command,paramPrimaryKeys,paramTags);
			return true;
		}

		///<summary>Returns true if Update(MobileNotification,MobileNotification) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(MobileNotification mobileNotification,MobileNotification oldMobileNotification) {
			if(mobileNotification.NotificationType != oldMobileNotification.NotificationType) {
				return true;
			}
			if(mobileNotification.DeviceId != oldMobileNotification.DeviceId) {
				return true;
			}
			if(mobileNotification.PrimaryKeys != oldMobileNotification.PrimaryKeys) {
				return true;
			}
			if(mobileNotification.Tags != oldMobileNotification.Tags) {
				return true;
			}
			if(mobileNotification.DateTimeEntry != oldMobileNotification.DateTimeEntry) {
				return true;
			}
			if(mobileNotification.DateTimeExpires != oldMobileNotification.DateTimeExpires) {
				return true;
			}
			if(mobileNotification.AppTarget != oldMobileNotification.AppTarget) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one MobileNotification from the database.</summary>
		public static void Delete(long mobileNotificationNum) {
			string command="DELETE FROM mobilenotification "
				+"WHERE MobileNotificationNum = "+POut.Long(mobileNotificationNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many MobileNotifications from the database.</summary>
		public static void DeleteMany(List<long> listMobileNotificationNums) {
			if(listMobileNotificationNums==null || listMobileNotificationNums.Count==0) {
				return;
			}
			string command="DELETE FROM mobilenotification "
				+"WHERE MobileNotificationNum IN("+string.Join(",",listMobileNotificationNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}