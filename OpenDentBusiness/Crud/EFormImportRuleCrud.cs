//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class EFormImportRuleCrud {
		///<summary>Gets one EFormImportRule object from the database using the primary key.  Returns null if not found.</summary>
		public static EFormImportRule SelectOne(long eFormImportRuleNum) {
			string command="SELECT * FROM eformimportrule "
				+"WHERE EFormImportRuleNum = "+POut.Long(eFormImportRuleNum);
			List<EFormImportRule> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EFormImportRule object from the database using a query.</summary>
		public static EFormImportRule SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EFormImportRule> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EFormImportRule objects from the database using a query.</summary>
		public static List<EFormImportRule> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EFormImportRule> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EFormImportRule> TableToList(DataTable table) {
			List<EFormImportRule> retVal=new List<EFormImportRule>();
			EFormImportRule eFormImportRule;
			foreach(DataRow row in table.Rows) {
				eFormImportRule=new EFormImportRule();
				eFormImportRule.EFormImportRuleNum= PIn.Long  (row["EFormImportRuleNum"].ToString());
				eFormImportRule.FieldName         = PIn.String(row["FieldName"].ToString());
				eFormImportRule.Situation         = (OpenDentBusiness.EnumEFormImportSituation)PIn.Int(row["Situation"].ToString());
				eFormImportRule.Action            = (OpenDentBusiness.EnumEFormImportAction)PIn.Int(row["Action"].ToString());
				retVal.Add(eFormImportRule);
			}
			return retVal;
		}

		///<summary>Converts a list of EFormImportRule into a DataTable.</summary>
		public static DataTable ListToTable(List<EFormImportRule> listEFormImportRules,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EFormImportRule";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EFormImportRuleNum");
			table.Columns.Add("FieldName");
			table.Columns.Add("Situation");
			table.Columns.Add("Action");
			foreach(EFormImportRule eFormImportRule in listEFormImportRules) {
				table.Rows.Add(new object[] {
					POut.Long  (eFormImportRule.EFormImportRuleNum),
					            eFormImportRule.FieldName,
					POut.Int   ((int)eFormImportRule.Situation),
					POut.Int   ((int)eFormImportRule.Action),
				});
			}
			return table;
		}

		///<summary>Inserts one EFormImportRule into the database.  Returns the new priKey.</summary>
		public static long Insert(EFormImportRule eFormImportRule) {
			return Insert(eFormImportRule,false);
		}

		///<summary>Inserts one EFormImportRule into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EFormImportRule eFormImportRule,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				eFormImportRule.EFormImportRuleNum=ReplicationServers.GetKey("eformimportrule","EFormImportRuleNum");
			}
			string command="INSERT INTO eformimportrule (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EFormImportRuleNum,";
			}
			command+="FieldName,Situation,Action) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(eFormImportRule.EFormImportRuleNum)+",";
			}
			command+=
				 "'"+POut.String(eFormImportRule.FieldName)+"',"
				+    POut.Int   ((int)eFormImportRule.Situation)+","
				+    POut.Int   ((int)eFormImportRule.Action)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				eFormImportRule.EFormImportRuleNum=Db.NonQ(command,true,"EFormImportRuleNum","eFormImportRule");
			}
			return eFormImportRule.EFormImportRuleNum;
		}

		///<summary>Inserts one EFormImportRule into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EFormImportRule eFormImportRule) {
			return InsertNoCache(eFormImportRule,false);
		}

		///<summary>Inserts one EFormImportRule into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EFormImportRule eFormImportRule,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO eformimportrule (";
			if(!useExistingPK && isRandomKeys) {
				eFormImportRule.EFormImportRuleNum=ReplicationServers.GetKeyNoCache("eformimportrule","EFormImportRuleNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EFormImportRuleNum,";
			}
			command+="FieldName,Situation,Action) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(eFormImportRule.EFormImportRuleNum)+",";
			}
			command+=
				 "'"+POut.String(eFormImportRule.FieldName)+"',"
				+    POut.Int   ((int)eFormImportRule.Situation)+","
				+    POut.Int   ((int)eFormImportRule.Action)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				eFormImportRule.EFormImportRuleNum=Db.NonQ(command,true,"EFormImportRuleNum","eFormImportRule");
			}
			return eFormImportRule.EFormImportRuleNum;
		}

		///<summary>Updates one EFormImportRule in the database.</summary>
		public static void Update(EFormImportRule eFormImportRule) {
			string command="UPDATE eformimportrule SET "
				+"FieldName         = '"+POut.String(eFormImportRule.FieldName)+"', "
				+"Situation         =  "+POut.Int   ((int)eFormImportRule.Situation)+", "
				+"Action            =  "+POut.Int   ((int)eFormImportRule.Action)+" "
				+"WHERE EFormImportRuleNum = "+POut.Long(eFormImportRule.EFormImportRuleNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EFormImportRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EFormImportRule eFormImportRule,EFormImportRule oldEFormImportRule) {
			string command="";
			if(eFormImportRule.FieldName != oldEFormImportRule.FieldName) {
				if(command!="") { command+=",";}
				command+="FieldName = '"+POut.String(eFormImportRule.FieldName)+"'";
			}
			if(eFormImportRule.Situation != oldEFormImportRule.Situation) {
				if(command!="") { command+=",";}
				command+="Situation = "+POut.Int   ((int)eFormImportRule.Situation)+"";
			}
			if(eFormImportRule.Action != oldEFormImportRule.Action) {
				if(command!="") { command+=",";}
				command+="Action = "+POut.Int   ((int)eFormImportRule.Action)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE eformimportrule SET "+command
				+" WHERE EFormImportRuleNum = "+POut.Long(eFormImportRule.EFormImportRuleNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(EFormImportRule,EFormImportRule) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EFormImportRule eFormImportRule,EFormImportRule oldEFormImportRule) {
			if(eFormImportRule.FieldName != oldEFormImportRule.FieldName) {
				return true;
			}
			if(eFormImportRule.Situation != oldEFormImportRule.Situation) {
				return true;
			}
			if(eFormImportRule.Action != oldEFormImportRule.Action) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one EFormImportRule from the database.</summary>
		public static void Delete(long eFormImportRuleNum) {
			string command="DELETE FROM eformimportrule "
				+"WHERE EFormImportRuleNum = "+POut.Long(eFormImportRuleNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many EFormImportRules from the database.</summary>
		public static void DeleteMany(List<long> listEFormImportRuleNums) {
			if(listEFormImportRuleNums==null || listEFormImportRuleNums.Count==0) {
				return;
			}
			string command="DELETE FROM eformimportrule "
				+"WHERE EFormImportRuleNum IN("+string.Join(",",listEFormImportRuleNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}