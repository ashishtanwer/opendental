//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class EFormDefCrud {
		///<summary>Gets one EFormDef object from the database using the primary key.  Returns null if not found.</summary>
		public static EFormDef SelectOne(long eFormDefNum) {
			string command="SELECT * FROM eformdef "
				+"WHERE EFormDefNum = "+POut.Long(eFormDefNum);
			List<EFormDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EFormDef object from the database using a query.</summary>
		public static EFormDef SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EFormDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EFormDef objects from the database using a query.</summary>
		public static List<EFormDef> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EFormDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EFormDef> TableToList(DataTable table) {
			List<EFormDef> retVal=new List<EFormDef>();
			EFormDef eFormDef;
			foreach(DataRow row in table.Rows) {
				eFormDef=new EFormDef();
				eFormDef.EFormDefNum          = PIn.Long  (row["EFormDefNum"].ToString());
				eFormDef.FormType             = (OpenDentBusiness.EnumEFormType)PIn.Int(row["FormType"].ToString());
				eFormDef.Description          = PIn.String(row["Description"].ToString());
				eFormDef.DateTCreated         = PIn.DateT (row["DateTCreated"].ToString());
				eFormDef.IsInternalHidden     = PIn.Bool  (row["IsInternalHidden"].ToString());
				eFormDef.MaxWidth             = PIn.Int   (row["MaxWidth"].ToString());
				eFormDef.RevID                = PIn.Int   (row["RevID"].ToString());
				eFormDef.ShowLabelsBold       = PIn.Bool  (row["ShowLabelsBold"].ToString());
				eFormDef.SpaceBelowEachField  = PIn.Int   (row["SpaceBelowEachField"].ToString());
				eFormDef.SpaceToRightEachField= PIn.Int   (row["SpaceToRightEachField"].ToString());
				eFormDef.SaveImageCategory    = PIn.Long  (row["SaveImageCategory"].ToString());
				retVal.Add(eFormDef);
			}
			return retVal;
		}

		///<summary>Converts a list of EFormDef into a DataTable.</summary>
		public static DataTable ListToTable(List<EFormDef> listEFormDefs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EFormDef";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EFormDefNum");
			table.Columns.Add("FormType");
			table.Columns.Add("Description");
			table.Columns.Add("DateTCreated");
			table.Columns.Add("IsInternalHidden");
			table.Columns.Add("MaxWidth");
			table.Columns.Add("RevID");
			table.Columns.Add("ShowLabelsBold");
			table.Columns.Add("SpaceBelowEachField");
			table.Columns.Add("SpaceToRightEachField");
			table.Columns.Add("SaveImageCategory");
			foreach(EFormDef eFormDef in listEFormDefs) {
				table.Rows.Add(new object[] {
					POut.Long  (eFormDef.EFormDefNum),
					POut.Int   ((int)eFormDef.FormType),
					            eFormDef.Description,
					POut.DateT (eFormDef.DateTCreated,false),
					POut.Bool  (eFormDef.IsInternalHidden),
					POut.Int   (eFormDef.MaxWidth),
					POut.Int   (eFormDef.RevID),
					POut.Bool  (eFormDef.ShowLabelsBold),
					POut.Int   (eFormDef.SpaceBelowEachField),
					POut.Int   (eFormDef.SpaceToRightEachField),
					POut.Long  (eFormDef.SaveImageCategory),
				});
			}
			return table;
		}

		///<summary>Inserts one EFormDef into the database.  Returns the new priKey.</summary>
		public static long Insert(EFormDef eFormDef) {
			return Insert(eFormDef,false);
		}

		///<summary>Inserts one EFormDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EFormDef eFormDef,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				eFormDef.EFormDefNum=ReplicationServers.GetKey("eformdef","EFormDefNum");
			}
			string command="INSERT INTO eformdef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EFormDefNum,";
			}
			command+="FormType,Description,DateTCreated,IsInternalHidden,MaxWidth,RevID,ShowLabelsBold,SpaceBelowEachField,SpaceToRightEachField,SaveImageCategory) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(eFormDef.EFormDefNum)+",";
			}
			command+=
				     POut.Int   ((int)eFormDef.FormType)+","
				+"'"+POut.String(eFormDef.Description)+"',"
				+    POut.DateT (eFormDef.DateTCreated)+","
				+    POut.Bool  (eFormDef.IsInternalHidden)+","
				+    POut.Int   (eFormDef.MaxWidth)+","
				+    POut.Int   (eFormDef.RevID)+","
				+    POut.Bool  (eFormDef.ShowLabelsBold)+","
				+    POut.Int   (eFormDef.SpaceBelowEachField)+","
				+    POut.Int   (eFormDef.SpaceToRightEachField)+","
				+    POut.Long  (eFormDef.SaveImageCategory)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				eFormDef.EFormDefNum=Db.NonQ(command,true,"EFormDefNum","eFormDef");
			}
			return eFormDef.EFormDefNum;
		}

		///<summary>Inserts one EFormDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EFormDef eFormDef) {
			return InsertNoCache(eFormDef,false);
		}

		///<summary>Inserts one EFormDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EFormDef eFormDef,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO eformdef (";
			if(!useExistingPK && isRandomKeys) {
				eFormDef.EFormDefNum=ReplicationServers.GetKeyNoCache("eformdef","EFormDefNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EFormDefNum,";
			}
			command+="FormType,Description,DateTCreated,IsInternalHidden,MaxWidth,RevID,ShowLabelsBold,SpaceBelowEachField,SpaceToRightEachField,SaveImageCategory) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(eFormDef.EFormDefNum)+",";
			}
			command+=
				     POut.Int   ((int)eFormDef.FormType)+","
				+"'"+POut.String(eFormDef.Description)+"',"
				+    POut.DateT (eFormDef.DateTCreated)+","
				+    POut.Bool  (eFormDef.IsInternalHidden)+","
				+    POut.Int   (eFormDef.MaxWidth)+","
				+    POut.Int   (eFormDef.RevID)+","
				+    POut.Bool  (eFormDef.ShowLabelsBold)+","
				+    POut.Int   (eFormDef.SpaceBelowEachField)+","
				+    POut.Int   (eFormDef.SpaceToRightEachField)+","
				+    POut.Long  (eFormDef.SaveImageCategory)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				eFormDef.EFormDefNum=Db.NonQ(command,true,"EFormDefNum","eFormDef");
			}
			return eFormDef.EFormDefNum;
		}

		///<summary>Updates one EFormDef in the database.</summary>
		public static void Update(EFormDef eFormDef) {
			string command="UPDATE eformdef SET "
				+"FormType             =  "+POut.Int   ((int)eFormDef.FormType)+", "
				+"Description          = '"+POut.String(eFormDef.Description)+"', "
				+"DateTCreated         =  "+POut.DateT (eFormDef.DateTCreated)+", "
				+"IsInternalHidden     =  "+POut.Bool  (eFormDef.IsInternalHidden)+", "
				+"MaxWidth             =  "+POut.Int   (eFormDef.MaxWidth)+", "
				+"RevID                =  "+POut.Int   (eFormDef.RevID)+", "
				+"ShowLabelsBold       =  "+POut.Bool  (eFormDef.ShowLabelsBold)+", "
				+"SpaceBelowEachField  =  "+POut.Int   (eFormDef.SpaceBelowEachField)+", "
				+"SpaceToRightEachField=  "+POut.Int   (eFormDef.SpaceToRightEachField)+", "
				+"SaveImageCategory    =  "+POut.Long  (eFormDef.SaveImageCategory)+" "
				+"WHERE EFormDefNum = "+POut.Long(eFormDef.EFormDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EFormDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EFormDef eFormDef,EFormDef oldEFormDef) {
			string command="";
			if(eFormDef.FormType != oldEFormDef.FormType) {
				if(command!="") { command+=",";}
				command+="FormType = "+POut.Int   ((int)eFormDef.FormType)+"";
			}
			if(eFormDef.Description != oldEFormDef.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(eFormDef.Description)+"'";
			}
			if(eFormDef.DateTCreated != oldEFormDef.DateTCreated) {
				if(command!="") { command+=",";}
				command+="DateTCreated = "+POut.DateT(eFormDef.DateTCreated)+"";
			}
			if(eFormDef.IsInternalHidden != oldEFormDef.IsInternalHidden) {
				if(command!="") { command+=",";}
				command+="IsInternalHidden = "+POut.Bool(eFormDef.IsInternalHidden)+"";
			}
			if(eFormDef.MaxWidth != oldEFormDef.MaxWidth) {
				if(command!="") { command+=",";}
				command+="MaxWidth = "+POut.Int(eFormDef.MaxWidth)+"";
			}
			if(eFormDef.RevID != oldEFormDef.RevID) {
				if(command!="") { command+=",";}
				command+="RevID = "+POut.Int(eFormDef.RevID)+"";
			}
			if(eFormDef.ShowLabelsBold != oldEFormDef.ShowLabelsBold) {
				if(command!="") { command+=",";}
				command+="ShowLabelsBold = "+POut.Bool(eFormDef.ShowLabelsBold)+"";
			}
			if(eFormDef.SpaceBelowEachField != oldEFormDef.SpaceBelowEachField) {
				if(command!="") { command+=",";}
				command+="SpaceBelowEachField = "+POut.Int(eFormDef.SpaceBelowEachField)+"";
			}
			if(eFormDef.SpaceToRightEachField != oldEFormDef.SpaceToRightEachField) {
				if(command!="") { command+=",";}
				command+="SpaceToRightEachField = "+POut.Int(eFormDef.SpaceToRightEachField)+"";
			}
			if(eFormDef.SaveImageCategory != oldEFormDef.SaveImageCategory) {
				if(command!="") { command+=",";}
				command+="SaveImageCategory = "+POut.Long(eFormDef.SaveImageCategory)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE eformdef SET "+command
				+" WHERE EFormDefNum = "+POut.Long(eFormDef.EFormDefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(EFormDef,EFormDef) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EFormDef eFormDef,EFormDef oldEFormDef) {
			if(eFormDef.FormType != oldEFormDef.FormType) {
				return true;
			}
			if(eFormDef.Description != oldEFormDef.Description) {
				return true;
			}
			if(eFormDef.DateTCreated != oldEFormDef.DateTCreated) {
				return true;
			}
			if(eFormDef.IsInternalHidden != oldEFormDef.IsInternalHidden) {
				return true;
			}
			if(eFormDef.MaxWidth != oldEFormDef.MaxWidth) {
				return true;
			}
			if(eFormDef.RevID != oldEFormDef.RevID) {
				return true;
			}
			if(eFormDef.ShowLabelsBold != oldEFormDef.ShowLabelsBold) {
				return true;
			}
			if(eFormDef.SpaceBelowEachField != oldEFormDef.SpaceBelowEachField) {
				return true;
			}
			if(eFormDef.SpaceToRightEachField != oldEFormDef.SpaceToRightEachField) {
				return true;
			}
			if(eFormDef.SaveImageCategory != oldEFormDef.SaveImageCategory) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one EFormDef from the database.</summary>
		public static void Delete(long eFormDefNum) {
			string command="DELETE FROM eformdef "
				+"WHERE EFormDefNum = "+POut.Long(eFormDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many EFormDefs from the database.</summary>
		public static void DeleteMany(List<long> listEFormDefNums) {
			if(listEFormDefNums==null || listEFormDefNums.Count==0) {
				return;
			}
			string command="DELETE FROM eformdef "
				+"WHERE EFormDefNum IN("+string.Join(",",listEFormDefNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}