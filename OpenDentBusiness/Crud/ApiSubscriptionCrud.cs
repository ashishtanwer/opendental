//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ApiSubscriptionCrud {
		///<summary>Gets one ApiSubscription object from the database using the primary key.  Returns null if not found.</summary>
		public static ApiSubscription SelectOne(long apiSubscriptionNum) {
			string command="SELECT * FROM apisubscription "
				+"WHERE ApiSubscriptionNum = "+POut.Long(apiSubscriptionNum);
			List<ApiSubscription> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ApiSubscription object from the database using a query.</summary>
		public static ApiSubscription SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ApiSubscription> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ApiSubscription objects from the database using a query.</summary>
		public static List<ApiSubscription> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ApiSubscription> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ApiSubscription> TableToList(DataTable table) {
			List<ApiSubscription> retVal=new List<ApiSubscription>();
			ApiSubscription apiSubscription;
			foreach(DataRow row in table.Rows) {
				apiSubscription=new ApiSubscription();
				apiSubscription.ApiSubscriptionNum= PIn.Long  (row["ApiSubscriptionNum"].ToString());
				apiSubscription.EndPointUrl       = PIn.String(row["EndPointUrl"].ToString());
				apiSubscription.Workstation       = PIn.String(row["Workstation"].ToString());
				apiSubscription.CustomerKey       = PIn.String(row["CustomerKey"].ToString());
				apiSubscription.WatchTable        = PIn.String(row["WatchTable"].ToString());
				apiSubscription.PollingSeconds    = PIn.Int   (row["PollingSeconds"].ToString());
				apiSubscription.UiEventType       = PIn.String(row["UiEventType"].ToString());
				apiSubscription.DateTimeStart     = PIn.DateT (row["DateTimeStart"].ToString());
				apiSubscription.DateTimeStop      = PIn.DateT (row["DateTimeStop"].ToString());
				apiSubscription.Note              = PIn.String(row["Note"].ToString());
				retVal.Add(apiSubscription);
			}
			return retVal;
		}

		///<summary>Converts a list of ApiSubscription into a DataTable.</summary>
		public static DataTable ListToTable(List<ApiSubscription> listApiSubscriptions,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ApiSubscription";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ApiSubscriptionNum");
			table.Columns.Add("EndPointUrl");
			table.Columns.Add("Workstation");
			table.Columns.Add("CustomerKey");
			table.Columns.Add("WatchTable");
			table.Columns.Add("PollingSeconds");
			table.Columns.Add("UiEventType");
			table.Columns.Add("DateTimeStart");
			table.Columns.Add("DateTimeStop");
			table.Columns.Add("Note");
			foreach(ApiSubscription apiSubscription in listApiSubscriptions) {
				table.Rows.Add(new object[] {
					POut.Long  (apiSubscription.ApiSubscriptionNum),
					            apiSubscription.EndPointUrl,
					            apiSubscription.Workstation,
					            apiSubscription.CustomerKey,
					            apiSubscription.WatchTable,
					POut.Int   (apiSubscription.PollingSeconds),
					            apiSubscription.UiEventType,
					POut.DateT (apiSubscription.DateTimeStart,false),
					POut.DateT (apiSubscription.DateTimeStop,false),
					            apiSubscription.Note,
				});
			}
			return table;
		}

		///<summary>Inserts one ApiSubscription into the database.  Returns the new priKey.</summary>
		public static long Insert(ApiSubscription apiSubscription) {
			return Insert(apiSubscription,false);
		}

		///<summary>Inserts one ApiSubscription into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ApiSubscription apiSubscription,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				apiSubscription.ApiSubscriptionNum=ReplicationServers.GetKey("apisubscription","ApiSubscriptionNum");
			}
			string command="INSERT INTO apisubscription (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ApiSubscriptionNum,";
			}
			command+="EndPointUrl,Workstation,CustomerKey,WatchTable,PollingSeconds,UiEventType,DateTimeStart,DateTimeStop,Note) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(apiSubscription.ApiSubscriptionNum)+",";
			}
			command+=
				 "'"+POut.String(apiSubscription.EndPointUrl)+"',"
				+"'"+POut.String(apiSubscription.Workstation)+"',"
				+"'"+POut.String(apiSubscription.CustomerKey)+"',"
				+"'"+POut.String(apiSubscription.WatchTable)+"',"
				+    POut.Int   (apiSubscription.PollingSeconds)+","
				+"'"+POut.String(apiSubscription.UiEventType)+"',"
				+    POut.DateT (apiSubscription.DateTimeStart)+","
				+    POut.DateT (apiSubscription.DateTimeStop)+","
				+"'"+POut.String(apiSubscription.Note)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				apiSubscription.ApiSubscriptionNum=Db.NonQ(command,true,"ApiSubscriptionNum","apiSubscription");
			}
			return apiSubscription.ApiSubscriptionNum;
		}

		///<summary>Inserts one ApiSubscription into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ApiSubscription apiSubscription) {
			return InsertNoCache(apiSubscription,false);
		}

		///<summary>Inserts one ApiSubscription into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ApiSubscription apiSubscription,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO apisubscription (";
			if(!useExistingPK && isRandomKeys) {
				apiSubscription.ApiSubscriptionNum=ReplicationServers.GetKeyNoCache("apisubscription","ApiSubscriptionNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ApiSubscriptionNum,";
			}
			command+="EndPointUrl,Workstation,CustomerKey,WatchTable,PollingSeconds,UiEventType,DateTimeStart,DateTimeStop,Note) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(apiSubscription.ApiSubscriptionNum)+",";
			}
			command+=
				 "'"+POut.String(apiSubscription.EndPointUrl)+"',"
				+"'"+POut.String(apiSubscription.Workstation)+"',"
				+"'"+POut.String(apiSubscription.CustomerKey)+"',"
				+"'"+POut.String(apiSubscription.WatchTable)+"',"
				+    POut.Int   (apiSubscription.PollingSeconds)+","
				+"'"+POut.String(apiSubscription.UiEventType)+"',"
				+    POut.DateT (apiSubscription.DateTimeStart)+","
				+    POut.DateT (apiSubscription.DateTimeStop)+","
				+"'"+POut.String(apiSubscription.Note)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				apiSubscription.ApiSubscriptionNum=Db.NonQ(command,true,"ApiSubscriptionNum","apiSubscription");
			}
			return apiSubscription.ApiSubscriptionNum;
		}

		///<summary>Updates one ApiSubscription in the database.</summary>
		public static void Update(ApiSubscription apiSubscription) {
			string command="UPDATE apisubscription SET "
				+"EndPointUrl       = '"+POut.String(apiSubscription.EndPointUrl)+"', "
				+"Workstation       = '"+POut.String(apiSubscription.Workstation)+"', "
				+"CustomerKey       = '"+POut.String(apiSubscription.CustomerKey)+"', "
				+"WatchTable        = '"+POut.String(apiSubscription.WatchTable)+"', "
				+"PollingSeconds    =  "+POut.Int   (apiSubscription.PollingSeconds)+", "
				+"UiEventType       = '"+POut.String(apiSubscription.UiEventType)+"', "
				+"DateTimeStart     =  "+POut.DateT (apiSubscription.DateTimeStart)+", "
				+"DateTimeStop      =  "+POut.DateT (apiSubscription.DateTimeStop)+", "
				+"Note              = '"+POut.String(apiSubscription.Note)+"' "
				+"WHERE ApiSubscriptionNum = "+POut.Long(apiSubscription.ApiSubscriptionNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ApiSubscription in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ApiSubscription apiSubscription,ApiSubscription oldApiSubscription) {
			string command="";
			if(apiSubscription.EndPointUrl != oldApiSubscription.EndPointUrl) {
				if(command!="") { command+=",";}
				command+="EndPointUrl = '"+POut.String(apiSubscription.EndPointUrl)+"'";
			}
			if(apiSubscription.Workstation != oldApiSubscription.Workstation) {
				if(command!="") { command+=",";}
				command+="Workstation = '"+POut.String(apiSubscription.Workstation)+"'";
			}
			if(apiSubscription.CustomerKey != oldApiSubscription.CustomerKey) {
				if(command!="") { command+=",";}
				command+="CustomerKey = '"+POut.String(apiSubscription.CustomerKey)+"'";
			}
			if(apiSubscription.WatchTable != oldApiSubscription.WatchTable) {
				if(command!="") { command+=",";}
				command+="WatchTable = '"+POut.String(apiSubscription.WatchTable)+"'";
			}
			if(apiSubscription.PollingSeconds != oldApiSubscription.PollingSeconds) {
				if(command!="") { command+=",";}
				command+="PollingSeconds = "+POut.Int(apiSubscription.PollingSeconds)+"";
			}
			if(apiSubscription.UiEventType != oldApiSubscription.UiEventType) {
				if(command!="") { command+=",";}
				command+="UiEventType = '"+POut.String(apiSubscription.UiEventType)+"'";
			}
			if(apiSubscription.DateTimeStart != oldApiSubscription.DateTimeStart) {
				if(command!="") { command+=",";}
				command+="DateTimeStart = "+POut.DateT(apiSubscription.DateTimeStart)+"";
			}
			if(apiSubscription.DateTimeStop != oldApiSubscription.DateTimeStop) {
				if(command!="") { command+=",";}
				command+="DateTimeStop = "+POut.DateT(apiSubscription.DateTimeStop)+"";
			}
			if(apiSubscription.Note != oldApiSubscription.Note) {
				if(command!="") { command+=",";}
				command+="Note = '"+POut.String(apiSubscription.Note)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE apisubscription SET "+command
				+" WHERE ApiSubscriptionNum = "+POut.Long(apiSubscription.ApiSubscriptionNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ApiSubscription,ApiSubscription) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ApiSubscription apiSubscription,ApiSubscription oldApiSubscription) {
			if(apiSubscription.EndPointUrl != oldApiSubscription.EndPointUrl) {
				return true;
			}
			if(apiSubscription.Workstation != oldApiSubscription.Workstation) {
				return true;
			}
			if(apiSubscription.CustomerKey != oldApiSubscription.CustomerKey) {
				return true;
			}
			if(apiSubscription.WatchTable != oldApiSubscription.WatchTable) {
				return true;
			}
			if(apiSubscription.PollingSeconds != oldApiSubscription.PollingSeconds) {
				return true;
			}
			if(apiSubscription.UiEventType != oldApiSubscription.UiEventType) {
				return true;
			}
			if(apiSubscription.DateTimeStart != oldApiSubscription.DateTimeStart) {
				return true;
			}
			if(apiSubscription.DateTimeStop != oldApiSubscription.DateTimeStop) {
				return true;
			}
			if(apiSubscription.Note != oldApiSubscription.Note) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ApiSubscription from the database.</summary>
		public static void Delete(long apiSubscriptionNum) {
			string command="DELETE FROM apisubscription "
				+"WHERE ApiSubscriptionNum = "+POut.Long(apiSubscriptionNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ApiSubscriptions from the database.</summary>
		public static void DeleteMany(List<long> listApiSubscriptionNums) {
			if(listApiSubscriptionNums==null || listApiSubscriptionNums.Count==0) {
				return;
			}
			string command="DELETE FROM apisubscription "
				+"WHERE ApiSubscriptionNum IN("+string.Join(",",listApiSubscriptionNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}