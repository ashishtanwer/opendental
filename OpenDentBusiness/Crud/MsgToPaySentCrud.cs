//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class MsgToPaySentCrud {
		///<summary>Gets one MsgToPaySent object from the database using the primary key.  Returns null if not found.</summary>
		public static MsgToPaySent SelectOne(long msgToPaySentNum) {
			string command="SELECT * FROM msgtopaysent "
				+"WHERE MsgToPaySentNum = "+POut.Long(msgToPaySentNum);
			List<MsgToPaySent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MsgToPaySent object from the database using a query.</summary>
		public static MsgToPaySent SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MsgToPaySent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of MsgToPaySent objects from the database using a query.</summary>
		public static List<MsgToPaySent> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MsgToPaySent> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<MsgToPaySent> TableToList(DataTable table) {
			List<MsgToPaySent> retVal=new List<MsgToPaySent>();
			MsgToPaySent msgToPaySent;
			foreach(DataRow row in table.Rows) {
				msgToPaySent=new MsgToPaySent();
				msgToPaySent.MsgToPaySentNum    = PIn.Long  (row["MsgToPaySentNum"].ToString());
				msgToPaySent.PatNum             = PIn.Long  (row["PatNum"].ToString());
				msgToPaySent.ClinicNum          = PIn.Long  (row["ClinicNum"].ToString());
				msgToPaySent.ApptNum            = PIn.Long  (row["ApptNum"].ToString());
				msgToPaySent.ApptDateTime       = PIn.DateT (row["ApptDateTime"].ToString());
				msgToPaySent.TSPrior            = TimeSpan.FromTicks(PIn.Long(row["TSPrior"].ToString()));
				msgToPaySent.StatementNum       = PIn.Long  (row["StatementNum"].ToString());
				msgToPaySent.SendStatus         = (OpenDentBusiness.AutoCommStatus)PIn.Int(row["SendStatus"].ToString());
				msgToPaySent.Source             = (OpenDentBusiness.MsgToPaySource)PIn.Int(row["Source"].ToString());
				msgToPaySent.MessageType        = (OpenDentBusiness.CommType)PIn.Int(row["MessageType"].ToString());
				msgToPaySent.MessageFk          = PIn.Long  (row["MessageFk"].ToString());
				msgToPaySent.Subject            = PIn.String(row["Subject"].ToString());
				msgToPaySent.Message            = PIn.String(row["Message"].ToString());
				msgToPaySent.EmailType          = (OpenDentBusiness.EmailType)PIn.Int(row["EmailType"].ToString());
				msgToPaySent.DateTimeEntry      = PIn.DateT (row["DateTimeEntry"].ToString());
				msgToPaySent.DateTimeSent       = PIn.DateT (row["DateTimeSent"].ToString());
				msgToPaySent.ResponseDescript   = PIn.String(row["ResponseDescript"].ToString());
				msgToPaySent.ApptReminderRuleNum= PIn.Long  (row["ApptReminderRuleNum"].ToString());
				msgToPaySent.ShortGUID          = PIn.String(row["ShortGUID"].ToString());
				msgToPaySent.DateTimeSendFailed = PIn.DateT (row["DateTimeSendFailed"].ToString());
				retVal.Add(msgToPaySent);
			}
			return retVal;
		}

		///<summary>Converts a list of MsgToPaySent into a DataTable.</summary>
		public static DataTable ListToTable(List<MsgToPaySent> listMsgToPaySents,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="MsgToPaySent";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("MsgToPaySentNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("ApptNum");
			table.Columns.Add("ApptDateTime");
			table.Columns.Add("TSPrior");
			table.Columns.Add("StatementNum");
			table.Columns.Add("SendStatus");
			table.Columns.Add("Source");
			table.Columns.Add("MessageType");
			table.Columns.Add("MessageFk");
			table.Columns.Add("Subject");
			table.Columns.Add("Message");
			table.Columns.Add("EmailType");
			table.Columns.Add("DateTimeEntry");
			table.Columns.Add("DateTimeSent");
			table.Columns.Add("ResponseDescript");
			table.Columns.Add("ApptReminderRuleNum");
			table.Columns.Add("ShortGUID");
			table.Columns.Add("DateTimeSendFailed");
			foreach(MsgToPaySent msgToPaySent in listMsgToPaySents) {
				table.Rows.Add(new object[] {
					POut.Long  (msgToPaySent.MsgToPaySentNum),
					POut.Long  (msgToPaySent.PatNum),
					POut.Long  (msgToPaySent.ClinicNum),
					POut.Long  (msgToPaySent.ApptNum),
					POut.DateT (msgToPaySent.ApptDateTime,false),
					POut.Long (msgToPaySent.TSPrior.Ticks),
					POut.Long  (msgToPaySent.StatementNum),
					POut.Int   ((int)msgToPaySent.SendStatus),
					POut.Int   ((int)msgToPaySent.Source),
					POut.Int   ((int)msgToPaySent.MessageType),
					POut.Long  (msgToPaySent.MessageFk),
					            msgToPaySent.Subject,
					            msgToPaySent.Message,
					POut.Int   ((int)msgToPaySent.EmailType),
					POut.DateT (msgToPaySent.DateTimeEntry,false),
					POut.DateT (msgToPaySent.DateTimeSent,false),
					            msgToPaySent.ResponseDescript,
					POut.Long  (msgToPaySent.ApptReminderRuleNum),
					            msgToPaySent.ShortGUID,
					POut.DateT (msgToPaySent.DateTimeSendFailed,false),
				});
			}
			return table;
		}

		///<summary>Inserts one MsgToPaySent into the database.  Returns the new priKey.</summary>
		public static long Insert(MsgToPaySent msgToPaySent) {
			return Insert(msgToPaySent,false);
		}

		///<summary>Inserts one MsgToPaySent into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(MsgToPaySent msgToPaySent,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				msgToPaySent.MsgToPaySentNum=ReplicationServers.GetKey("msgtopaysent","MsgToPaySentNum");
			}
			string command="INSERT INTO msgtopaysent (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="MsgToPaySentNum,";
			}
			command+="PatNum,ClinicNum,ApptNum,ApptDateTime,TSPrior,StatementNum,SendStatus,Source,MessageType,MessageFk,Subject,Message,EmailType,DateTimeEntry,DateTimeSent,ResponseDescript,ApptReminderRuleNum,ShortGUID,DateTimeSendFailed) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(msgToPaySent.MsgToPaySentNum)+",";
			}
			command+=
				     POut.Long  (msgToPaySent.PatNum)+","
				+    POut.Long  (msgToPaySent.ClinicNum)+","
				+    POut.Long  (msgToPaySent.ApptNum)+","
				+    POut.DateT (msgToPaySent.ApptDateTime)+","
				+"'"+POut.Long  (msgToPaySent.TSPrior.Ticks)+"',"
				+    POut.Long  (msgToPaySent.StatementNum)+","
				+    POut.Int   ((int)msgToPaySent.SendStatus)+","
				+    POut.Int   ((int)msgToPaySent.Source)+","
				+    POut.Int   ((int)msgToPaySent.MessageType)+","
				+    POut.Long  (msgToPaySent.MessageFk)+","
				+    DbHelper.ParamChar+"paramSubject,"
				+    DbHelper.ParamChar+"paramMessage,"
				+    POut.Int   ((int)msgToPaySent.EmailType)+","
				+    DbHelper.Now()+","
				+    POut.DateT (msgToPaySent.DateTimeSent)+","
				+    DbHelper.ParamChar+"paramResponseDescript,"
				+    POut.Long  (msgToPaySent.ApptReminderRuleNum)+","
				+"'"+POut.String(msgToPaySent.ShortGUID)+"',"
				+    POut.DateT (msgToPaySent.DateTimeSendFailed)+")";
			if(msgToPaySent.Subject==null) {
				msgToPaySent.Subject="";
			}
			OdSqlParameter paramSubject=new OdSqlParameter("paramSubject",OdDbType.Text,POut.StringParam(msgToPaySent.Subject));
			if(msgToPaySent.Message==null) {
				msgToPaySent.Message="";
			}
			OdSqlParameter paramMessage=new OdSqlParameter("paramMessage",OdDbType.Text,POut.StringParam(msgToPaySent.Message));
			if(msgToPaySent.ResponseDescript==null) {
				msgToPaySent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(msgToPaySent.ResponseDescript));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramSubject,paramMessage,paramResponseDescript);
			}
			else {
				msgToPaySent.MsgToPaySentNum=Db.NonQ(command,true,"MsgToPaySentNum","msgToPaySent",paramSubject,paramMessage,paramResponseDescript);
			}
			return msgToPaySent.MsgToPaySentNum;
		}

		///<summary>Inserts one MsgToPaySent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MsgToPaySent msgToPaySent) {
			return InsertNoCache(msgToPaySent,false);
		}

		///<summary>Inserts one MsgToPaySent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MsgToPaySent msgToPaySent,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO msgtopaysent (";
			if(!useExistingPK && isRandomKeys) {
				msgToPaySent.MsgToPaySentNum=ReplicationServers.GetKeyNoCache("msgtopaysent","MsgToPaySentNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="MsgToPaySentNum,";
			}
			command+="PatNum,ClinicNum,ApptNum,ApptDateTime,TSPrior,StatementNum,SendStatus,Source,MessageType,MessageFk,Subject,Message,EmailType,DateTimeEntry,DateTimeSent,ResponseDescript,ApptReminderRuleNum,ShortGUID,DateTimeSendFailed) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(msgToPaySent.MsgToPaySentNum)+",";
			}
			command+=
				     POut.Long  (msgToPaySent.PatNum)+","
				+    POut.Long  (msgToPaySent.ClinicNum)+","
				+    POut.Long  (msgToPaySent.ApptNum)+","
				+    POut.DateT (msgToPaySent.ApptDateTime)+","
				+"'"+POut.Long(msgToPaySent.TSPrior.Ticks)+"',"
				+    POut.Long  (msgToPaySent.StatementNum)+","
				+    POut.Int   ((int)msgToPaySent.SendStatus)+","
				+    POut.Int   ((int)msgToPaySent.Source)+","
				+    POut.Int   ((int)msgToPaySent.MessageType)+","
				+    POut.Long  (msgToPaySent.MessageFk)+","
				+    DbHelper.ParamChar+"paramSubject,"
				+    DbHelper.ParamChar+"paramMessage,"
				+    POut.Int   ((int)msgToPaySent.EmailType)+","
				+    DbHelper.Now()+","
				+    POut.DateT (msgToPaySent.DateTimeSent)+","
				+    DbHelper.ParamChar+"paramResponseDescript,"
				+    POut.Long  (msgToPaySent.ApptReminderRuleNum)+","
				+"'"+POut.String(msgToPaySent.ShortGUID)+"',"
				+    POut.DateT (msgToPaySent.DateTimeSendFailed)+")";
			if(msgToPaySent.Subject==null) {
				msgToPaySent.Subject="";
			}
			OdSqlParameter paramSubject=new OdSqlParameter("paramSubject",OdDbType.Text,POut.StringParam(msgToPaySent.Subject));
			if(msgToPaySent.Message==null) {
				msgToPaySent.Message="";
			}
			OdSqlParameter paramMessage=new OdSqlParameter("paramMessage",OdDbType.Text,POut.StringParam(msgToPaySent.Message));
			if(msgToPaySent.ResponseDescript==null) {
				msgToPaySent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(msgToPaySent.ResponseDescript));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramSubject,paramMessage,paramResponseDescript);
			}
			else {
				msgToPaySent.MsgToPaySentNum=Db.NonQ(command,true,"MsgToPaySentNum","msgToPaySent",paramSubject,paramMessage,paramResponseDescript);
			}
			return msgToPaySent.MsgToPaySentNum;
		}

		///<summary>Updates one MsgToPaySent in the database.</summary>
		public static void Update(MsgToPaySent msgToPaySent) {
			string command="UPDATE msgtopaysent SET "
				+"PatNum             =  "+POut.Long  (msgToPaySent.PatNum)+", "
				+"ClinicNum          =  "+POut.Long  (msgToPaySent.ClinicNum)+", "
				+"ApptNum            =  "+POut.Long  (msgToPaySent.ApptNum)+", "
				+"ApptDateTime       =  "+POut.DateT (msgToPaySent.ApptDateTime)+", "
				+"TSPrior            =  "+POut.Long  (msgToPaySent.TSPrior.Ticks)+", "
				+"StatementNum       =  "+POut.Long  (msgToPaySent.StatementNum)+", "
				+"SendStatus         =  "+POut.Int   ((int)msgToPaySent.SendStatus)+", "
				+"Source             =  "+POut.Int   ((int)msgToPaySent.Source)+", "
				+"MessageType        =  "+POut.Int   ((int)msgToPaySent.MessageType)+", "
				+"MessageFk          =  "+POut.Long  (msgToPaySent.MessageFk)+", "
				+"Subject            =  "+DbHelper.ParamChar+"paramSubject, "
				+"Message            =  "+DbHelper.ParamChar+"paramMessage, "
				+"EmailType          =  "+POut.Int   ((int)msgToPaySent.EmailType)+", "
				//DateTimeEntry not allowed to change
				+"DateTimeSent       =  "+POut.DateT (msgToPaySent.DateTimeSent)+", "
				+"ResponseDescript   =  "+DbHelper.ParamChar+"paramResponseDescript, "
				+"ApptReminderRuleNum=  "+POut.Long  (msgToPaySent.ApptReminderRuleNum)+", "
				+"ShortGUID          = '"+POut.String(msgToPaySent.ShortGUID)+"', "
				+"DateTimeSendFailed =  "+POut.DateT (msgToPaySent.DateTimeSendFailed)+" "
				+"WHERE MsgToPaySentNum = "+POut.Long(msgToPaySent.MsgToPaySentNum);
			if(msgToPaySent.Subject==null) {
				msgToPaySent.Subject="";
			}
			OdSqlParameter paramSubject=new OdSqlParameter("paramSubject",OdDbType.Text,POut.StringParam(msgToPaySent.Subject));
			if(msgToPaySent.Message==null) {
				msgToPaySent.Message="";
			}
			OdSqlParameter paramMessage=new OdSqlParameter("paramMessage",OdDbType.Text,POut.StringParam(msgToPaySent.Message));
			if(msgToPaySent.ResponseDescript==null) {
				msgToPaySent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(msgToPaySent.ResponseDescript));
			Db.NonQ(command,paramSubject,paramMessage,paramResponseDescript);
		}

		///<summary>Updates one MsgToPaySent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(MsgToPaySent msgToPaySent,MsgToPaySent oldMsgToPaySent) {
			string command="";
			if(msgToPaySent.PatNum != oldMsgToPaySent.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(msgToPaySent.PatNum)+"";
			}
			if(msgToPaySent.ClinicNum != oldMsgToPaySent.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(msgToPaySent.ClinicNum)+"";
			}
			if(msgToPaySent.ApptNum != oldMsgToPaySent.ApptNum) {
				if(command!="") { command+=",";}
				command+="ApptNum = "+POut.Long(msgToPaySent.ApptNum)+"";
			}
			if(msgToPaySent.ApptDateTime != oldMsgToPaySent.ApptDateTime) {
				if(command!="") { command+=",";}
				command+="ApptDateTime = "+POut.DateT(msgToPaySent.ApptDateTime)+"";
			}
			if(msgToPaySent.TSPrior != oldMsgToPaySent.TSPrior) {
				if(command!="") { command+=",";}
				command+="TSPrior = '"+POut.Long  (msgToPaySent.TSPrior.Ticks)+"'";
			}
			if(msgToPaySent.StatementNum != oldMsgToPaySent.StatementNum) {
				if(command!="") { command+=",";}
				command+="StatementNum = "+POut.Long(msgToPaySent.StatementNum)+"";
			}
			if(msgToPaySent.SendStatus != oldMsgToPaySent.SendStatus) {
				if(command!="") { command+=",";}
				command+="SendStatus = "+POut.Int   ((int)msgToPaySent.SendStatus)+"";
			}
			if(msgToPaySent.Source != oldMsgToPaySent.Source) {
				if(command!="") { command+=",";}
				command+="Source = "+POut.Int   ((int)msgToPaySent.Source)+"";
			}
			if(msgToPaySent.MessageType != oldMsgToPaySent.MessageType) {
				if(command!="") { command+=",";}
				command+="MessageType = "+POut.Int   ((int)msgToPaySent.MessageType)+"";
			}
			if(msgToPaySent.MessageFk != oldMsgToPaySent.MessageFk) {
				if(command!="") { command+=",";}
				command+="MessageFk = "+POut.Long(msgToPaySent.MessageFk)+"";
			}
			if(msgToPaySent.Subject != oldMsgToPaySent.Subject) {
				if(command!="") { command+=",";}
				command+="Subject = "+DbHelper.ParamChar+"paramSubject";
			}
			if(msgToPaySent.Message != oldMsgToPaySent.Message) {
				if(command!="") { command+=",";}
				command+="Message = "+DbHelper.ParamChar+"paramMessage";
			}
			if(msgToPaySent.EmailType != oldMsgToPaySent.EmailType) {
				if(command!="") { command+=",";}
				command+="EmailType = "+POut.Int   ((int)msgToPaySent.EmailType)+"";
			}
			//DateTimeEntry not allowed to change
			if(msgToPaySent.DateTimeSent != oldMsgToPaySent.DateTimeSent) {
				if(command!="") { command+=",";}
				command+="DateTimeSent = "+POut.DateT(msgToPaySent.DateTimeSent)+"";
			}
			if(msgToPaySent.ResponseDescript != oldMsgToPaySent.ResponseDescript) {
				if(command!="") { command+=",";}
				command+="ResponseDescript = "+DbHelper.ParamChar+"paramResponseDescript";
			}
			if(msgToPaySent.ApptReminderRuleNum != oldMsgToPaySent.ApptReminderRuleNum) {
				if(command!="") { command+=",";}
				command+="ApptReminderRuleNum = "+POut.Long(msgToPaySent.ApptReminderRuleNum)+"";
			}
			if(msgToPaySent.ShortGUID != oldMsgToPaySent.ShortGUID) {
				if(command!="") { command+=",";}
				command+="ShortGUID = '"+POut.String(msgToPaySent.ShortGUID)+"'";
			}
			if(msgToPaySent.DateTimeSendFailed != oldMsgToPaySent.DateTimeSendFailed) {
				if(command!="") { command+=",";}
				command+="DateTimeSendFailed = "+POut.DateT(msgToPaySent.DateTimeSendFailed)+"";
			}
			if(command=="") {
				return false;
			}
			if(msgToPaySent.Subject==null) {
				msgToPaySent.Subject="";
			}
			OdSqlParameter paramSubject=new OdSqlParameter("paramSubject",OdDbType.Text,POut.StringParam(msgToPaySent.Subject));
			if(msgToPaySent.Message==null) {
				msgToPaySent.Message="";
			}
			OdSqlParameter paramMessage=new OdSqlParameter("paramMessage",OdDbType.Text,POut.StringParam(msgToPaySent.Message));
			if(msgToPaySent.ResponseDescript==null) {
				msgToPaySent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(msgToPaySent.ResponseDescript));
			command="UPDATE msgtopaysent SET "+command
				+" WHERE MsgToPaySentNum = "+POut.Long(msgToPaySent.MsgToPaySentNum);
			Db.NonQ(command,paramSubject,paramMessage,paramResponseDescript);
			return true;
		}

		///<summary>Returns true if Update(MsgToPaySent,MsgToPaySent) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(MsgToPaySent msgToPaySent,MsgToPaySent oldMsgToPaySent) {
			if(msgToPaySent.PatNum != oldMsgToPaySent.PatNum) {
				return true;
			}
			if(msgToPaySent.ClinicNum != oldMsgToPaySent.ClinicNum) {
				return true;
			}
			if(msgToPaySent.ApptNum != oldMsgToPaySent.ApptNum) {
				return true;
			}
			if(msgToPaySent.ApptDateTime != oldMsgToPaySent.ApptDateTime) {
				return true;
			}
			if(msgToPaySent.TSPrior != oldMsgToPaySent.TSPrior) {
				return true;
			}
			if(msgToPaySent.StatementNum != oldMsgToPaySent.StatementNum) {
				return true;
			}
			if(msgToPaySent.SendStatus != oldMsgToPaySent.SendStatus) {
				return true;
			}
			if(msgToPaySent.Source != oldMsgToPaySent.Source) {
				return true;
			}
			if(msgToPaySent.MessageType != oldMsgToPaySent.MessageType) {
				return true;
			}
			if(msgToPaySent.MessageFk != oldMsgToPaySent.MessageFk) {
				return true;
			}
			if(msgToPaySent.Subject != oldMsgToPaySent.Subject) {
				return true;
			}
			if(msgToPaySent.Message != oldMsgToPaySent.Message) {
				return true;
			}
			if(msgToPaySent.EmailType != oldMsgToPaySent.EmailType) {
				return true;
			}
			//DateTimeEntry not allowed to change
			if(msgToPaySent.DateTimeSent != oldMsgToPaySent.DateTimeSent) {
				return true;
			}
			if(msgToPaySent.ResponseDescript != oldMsgToPaySent.ResponseDescript) {
				return true;
			}
			if(msgToPaySent.ApptReminderRuleNum != oldMsgToPaySent.ApptReminderRuleNum) {
				return true;
			}
			if(msgToPaySent.ShortGUID != oldMsgToPaySent.ShortGUID) {
				return true;
			}
			if(msgToPaySent.DateTimeSendFailed != oldMsgToPaySent.DateTimeSendFailed) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one MsgToPaySent from the database.</summary>
		public static void Delete(long msgToPaySentNum) {
			string command="DELETE FROM msgtopaysent "
				+"WHERE MsgToPaySentNum = "+POut.Long(msgToPaySentNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many MsgToPaySents from the database.</summary>
		public static void DeleteMany(List<long> listMsgToPaySentNums) {
			if(listMsgToPaySentNums==null || listMsgToPaySentNums.Count==0) {
				return;
			}
			string command="DELETE FROM msgtopaysent "
				+"WHERE MsgToPaySentNum IN("+string.Join(",",listMsgToPaySentNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}