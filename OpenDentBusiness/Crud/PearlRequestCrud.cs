//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class PearlRequestCrud {
		///<summary>Gets one PearlRequest object from the database using the primary key.  Returns null if not found.</summary>
		public static PearlRequest SelectOne(long pearlRequestNum) {
			string command="SELECT * FROM pearlrequest "
				+"WHERE PearlRequestNum = "+POut.Long(pearlRequestNum);
			List<PearlRequest> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one PearlRequest object from the database using a query.</summary>
		public static PearlRequest SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PearlRequest> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of PearlRequest objects from the database using a query.</summary>
		public static List<PearlRequest> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PearlRequest> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<PearlRequest> TableToList(DataTable table) {
			List<PearlRequest> retVal=new List<PearlRequest>();
			PearlRequest pearlRequest;
			foreach(DataRow row in table.Rows) {
				pearlRequest=new PearlRequest();
				pearlRequest.PearlRequestNum= PIn.Long  (row["PearlRequestNum"].ToString());
				pearlRequest.RequestId      = PIn.String(row["RequestId"].ToString());
				pearlRequest.DocNum         = PIn.Long  (row["DocNum"].ToString());
				pearlRequest.RequestStatus  = (OpenDentBusiness.EnumPearlStatus)PIn.Int(row["RequestStatus"].ToString());
				pearlRequest.DateTSent      = PIn.Date  (row["DateTSent"].ToString());
				pearlRequest.DateTChecked   = PIn.Date  (row["DateTChecked"].ToString());
				retVal.Add(pearlRequest);
			}
			return retVal;
		}

		///<summary>Converts a list of PearlRequest into a DataTable.</summary>
		public static DataTable ListToTable(List<PearlRequest> listPearlRequests,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="PearlRequest";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("PearlRequestNum");
			table.Columns.Add("RequestId");
			table.Columns.Add("DocNum");
			table.Columns.Add("RequestStatus");
			table.Columns.Add("DateTSent");
			table.Columns.Add("DateTChecked");
			foreach(PearlRequest pearlRequest in listPearlRequests) {
				table.Rows.Add(new object[] {
					POut.Long  (pearlRequest.PearlRequestNum),
					            pearlRequest.RequestId,
					POut.Long  (pearlRequest.DocNum),
					POut.Int   ((int)pearlRequest.RequestStatus),
					POut.DateT (pearlRequest.DateTSent,false),
					POut.DateT (pearlRequest.DateTChecked,false),
				});
			}
			return table;
		}

		///<summary>Inserts one PearlRequest into the database.  Returns the new priKey.</summary>
		public static long Insert(PearlRequest pearlRequest) {
			return Insert(pearlRequest,false);
		}

		///<summary>Inserts one PearlRequest into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(PearlRequest pearlRequest,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				pearlRequest.PearlRequestNum=ReplicationServers.GetKey("pearlrequest","PearlRequestNum");
			}
			string command="INSERT INTO pearlrequest (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="PearlRequestNum,";
			}
			command+="RequestId,DocNum,RequestStatus,DateTSent,DateTChecked) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(pearlRequest.PearlRequestNum)+",";
			}
			command+=
				 "'"+POut.String(pearlRequest.RequestId)+"',"
				+    POut.Long  (pearlRequest.DocNum)+","
				+    POut.Int   ((int)pearlRequest.RequestStatus)+","
				+    POut.Date  (pearlRequest.DateTSent)+","
				+    POut.Date  (pearlRequest.DateTChecked)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				pearlRequest.PearlRequestNum=Db.NonQ(command,true,"PearlRequestNum","pearlRequest");
			}
			return pearlRequest.PearlRequestNum;
		}

		///<summary>Inserts one PearlRequest into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PearlRequest pearlRequest) {
			return InsertNoCache(pearlRequest,false);
		}

		///<summary>Inserts one PearlRequest into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PearlRequest pearlRequest,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO pearlrequest (";
			if(!useExistingPK && isRandomKeys) {
				pearlRequest.PearlRequestNum=ReplicationServers.GetKeyNoCache("pearlrequest","PearlRequestNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="PearlRequestNum,";
			}
			command+="RequestId,DocNum,RequestStatus,DateTSent,DateTChecked) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(pearlRequest.PearlRequestNum)+",";
			}
			command+=
				 "'"+POut.String(pearlRequest.RequestId)+"',"
				+    POut.Long  (pearlRequest.DocNum)+","
				+    POut.Int   ((int)pearlRequest.RequestStatus)+","
				+    POut.Date  (pearlRequest.DateTSent)+","
				+    POut.Date  (pearlRequest.DateTChecked)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				pearlRequest.PearlRequestNum=Db.NonQ(command,true,"PearlRequestNum","pearlRequest");
			}
			return pearlRequest.PearlRequestNum;
		}

		///<summary>Updates one PearlRequest in the database.</summary>
		public static void Update(PearlRequest pearlRequest) {
			string command="UPDATE pearlrequest SET "
				+"RequestId      = '"+POut.String(pearlRequest.RequestId)+"', "
				+"DocNum         =  "+POut.Long  (pearlRequest.DocNum)+", "
				+"RequestStatus  =  "+POut.Int   ((int)pearlRequest.RequestStatus)+", "
				+"DateTSent      =  "+POut.Date  (pearlRequest.DateTSent)+", "
				+"DateTChecked   =  "+POut.Date  (pearlRequest.DateTChecked)+" "
				+"WHERE PearlRequestNum = "+POut.Long(pearlRequest.PearlRequestNum);
			Db.NonQ(command);
		}

		///<summary>Updates one PearlRequest in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(PearlRequest pearlRequest,PearlRequest oldPearlRequest) {
			string command="";
			if(pearlRequest.RequestId != oldPearlRequest.RequestId) {
				if(command!="") { command+=",";}
				command+="RequestId = '"+POut.String(pearlRequest.RequestId)+"'";
			}
			if(pearlRequest.DocNum != oldPearlRequest.DocNum) {
				if(command!="") { command+=",";}
				command+="DocNum = "+POut.Long(pearlRequest.DocNum)+"";
			}
			if(pearlRequest.RequestStatus != oldPearlRequest.RequestStatus) {
				if(command!="") { command+=",";}
				command+="RequestStatus = "+POut.Int   ((int)pearlRequest.RequestStatus)+"";
			}
			if(pearlRequest.DateTSent.Date != oldPearlRequest.DateTSent.Date) {
				if(command!="") { command+=",";}
				command+="DateTSent = "+POut.Date(pearlRequest.DateTSent)+"";
			}
			if(pearlRequest.DateTChecked.Date != oldPearlRequest.DateTChecked.Date) {
				if(command!="") { command+=",";}
				command+="DateTChecked = "+POut.Date(pearlRequest.DateTChecked)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE pearlrequest SET "+command
				+" WHERE PearlRequestNum = "+POut.Long(pearlRequest.PearlRequestNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(PearlRequest,PearlRequest) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(PearlRequest pearlRequest,PearlRequest oldPearlRequest) {
			if(pearlRequest.RequestId != oldPearlRequest.RequestId) {
				return true;
			}
			if(pearlRequest.DocNum != oldPearlRequest.DocNum) {
				return true;
			}
			if(pearlRequest.RequestStatus != oldPearlRequest.RequestStatus) {
				return true;
			}
			if(pearlRequest.DateTSent.Date != oldPearlRequest.DateTSent.Date) {
				return true;
			}
			if(pearlRequest.DateTChecked.Date != oldPearlRequest.DateTChecked.Date) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one PearlRequest from the database.</summary>
		public static void Delete(long pearlRequestNum) {
			string command="DELETE FROM pearlrequest "
				+"WHERE PearlRequestNum = "+POut.Long(pearlRequestNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many PearlRequests from the database.</summary>
		public static void DeleteMany(List<long> listPearlRequestNums) {
			if(listPearlRequestNums==null || listPearlRequestNums.Count==0) {
				return;
			}
			string command="DELETE FROM pearlrequest "
				+"WHERE PearlRequestNum IN("+string.Join(",",listPearlRequestNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}