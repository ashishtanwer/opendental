//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class PayPlanTemplateCrud {
		///<summary>Gets one PayPlanTemplate object from the database using the primary key.  Returns null if not found.</summary>
		public static PayPlanTemplate SelectOne(long payPlanTemplateNum) {
			string command="SELECT * FROM payplantemplate "
				+"WHERE PayPlanTemplateNum = "+POut.Long(payPlanTemplateNum);
			List<PayPlanTemplate> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one PayPlanTemplate object from the database using a query.</summary>
		public static PayPlanTemplate SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PayPlanTemplate> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of PayPlanTemplate objects from the database using a query.</summary>
		public static List<PayPlanTemplate> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PayPlanTemplate> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<PayPlanTemplate> TableToList(DataTable table) {
			List<PayPlanTemplate> retVal=new List<PayPlanTemplate>();
			PayPlanTemplate payPlanTemplate;
			foreach(DataRow row in table.Rows) {
				payPlanTemplate=new PayPlanTemplate();
				payPlanTemplate.PayPlanTemplateNum    = PIn.Long  (row["PayPlanTemplateNum"].ToString());
				payPlanTemplate.PayPlanTemplateName   = PIn.String(row["PayPlanTemplateName"].ToString());
				payPlanTemplate.ClinicNum             = PIn.Long  (row["ClinicNum"].ToString());
				payPlanTemplate.APR                   = PIn.Double(row["APR"].ToString());
				payPlanTemplate.InterestDelay         = PIn.Int   (row["InterestDelay"].ToString());
				payPlanTemplate.PayAmt                = PIn.Double(row["PayAmt"].ToString());
				payPlanTemplate.NumberOfPayments      = PIn.Int   (row["NumberOfPayments"].ToString());
				payPlanTemplate.ChargeFrequency       = (OpenDentBusiness.PayPlanFrequency)PIn.Int(row["ChargeFrequency"].ToString());
				payPlanTemplate.DownPayment           = PIn.Double(row["DownPayment"].ToString());
				payPlanTemplate.DynamicPayPlanTPOption= (OpenDentBusiness.DynamicPayPlanTPOptions)PIn.Int(row["DynamicPayPlanTPOption"].ToString());
				payPlanTemplate.Note                  = PIn.String(row["Note"].ToString());
				payPlanTemplate.IsHidden              = PIn.Bool  (row["IsHidden"].ToString());
				retVal.Add(payPlanTemplate);
			}
			return retVal;
		}

		///<summary>Converts a list of PayPlanTemplate into a DataTable.</summary>
		public static DataTable ListToTable(List<PayPlanTemplate> listPayPlanTemplates,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="PayPlanTemplate";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("PayPlanTemplateNum");
			table.Columns.Add("PayPlanTemplateName");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("APR");
			table.Columns.Add("InterestDelay");
			table.Columns.Add("PayAmt");
			table.Columns.Add("NumberOfPayments");
			table.Columns.Add("ChargeFrequency");
			table.Columns.Add("DownPayment");
			table.Columns.Add("DynamicPayPlanTPOption");
			table.Columns.Add("Note");
			table.Columns.Add("IsHidden");
			foreach(PayPlanTemplate payPlanTemplate in listPayPlanTemplates) {
				table.Rows.Add(new object[] {
					POut.Long  (payPlanTemplate.PayPlanTemplateNum),
					            payPlanTemplate.PayPlanTemplateName,
					POut.Long  (payPlanTemplate.ClinicNum),
					POut.Double(payPlanTemplate.APR),
					POut.Int   (payPlanTemplate.InterestDelay),
					POut.Double(payPlanTemplate.PayAmt),
					POut.Int   (payPlanTemplate.NumberOfPayments),
					POut.Int   ((int)payPlanTemplate.ChargeFrequency),
					POut.Double(payPlanTemplate.DownPayment),
					POut.Int   ((int)payPlanTemplate.DynamicPayPlanTPOption),
					            payPlanTemplate.Note,
					POut.Bool  (payPlanTemplate.IsHidden),
				});
			}
			return table;
		}

		///<summary>Inserts one PayPlanTemplate into the database.  Returns the new priKey.</summary>
		public static long Insert(PayPlanTemplate payPlanTemplate) {
			return Insert(payPlanTemplate,false);
		}

		///<summary>Inserts one PayPlanTemplate into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(PayPlanTemplate payPlanTemplate,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				payPlanTemplate.PayPlanTemplateNum=ReplicationServers.GetKey("payplantemplate","PayPlanTemplateNum");
			}
			string command="INSERT INTO payplantemplate (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="PayPlanTemplateNum,";
			}
			command+="PayPlanTemplateName,ClinicNum,APR,InterestDelay,PayAmt,NumberOfPayments,ChargeFrequency,DownPayment,DynamicPayPlanTPOption,Note,IsHidden) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(payPlanTemplate.PayPlanTemplateNum)+",";
			}
			command+=
				 "'"+POut.String(payPlanTemplate.PayPlanTemplateName)+"',"
				+    POut.Long  (payPlanTemplate.ClinicNum)+","
				+		 POut.Double(payPlanTemplate.APR)+","
				+    POut.Int   (payPlanTemplate.InterestDelay)+","
				+		 POut.Double(payPlanTemplate.PayAmt)+","
				+    POut.Int   (payPlanTemplate.NumberOfPayments)+","
				+    POut.Int   ((int)payPlanTemplate.ChargeFrequency)+","
				+		 POut.Double(payPlanTemplate.DownPayment)+","
				+    POut.Int   ((int)payPlanTemplate.DynamicPayPlanTPOption)+","
				+"'"+POut.String(payPlanTemplate.Note)+"',"
				+    POut.Bool  (payPlanTemplate.IsHidden)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				payPlanTemplate.PayPlanTemplateNum=Db.NonQ(command,true,"PayPlanTemplateNum","payPlanTemplate");
			}
			return payPlanTemplate.PayPlanTemplateNum;
		}

		///<summary>Inserts many PayPlanTemplates into the database.</summary>
		public static void InsertMany(List<PayPlanTemplate> listPayPlanTemplates) {
			InsertMany(listPayPlanTemplates,false);
		}

		///<summary>Inserts many PayPlanTemplates into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<PayPlanTemplate> listPayPlanTemplates,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(PayPlanTemplate payPlanTemplate in listPayPlanTemplates) {
					Insert(payPlanTemplate);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listPayPlanTemplates.Count) {
					PayPlanTemplate payPlanTemplate=listPayPlanTemplates[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO payplantemplate (");
						if(useExistingPK) {
							sbCommands.Append("PayPlanTemplateNum,");
						}
						sbCommands.Append("PayPlanTemplateName,ClinicNum,APR,InterestDelay,PayAmt,NumberOfPayments,ChargeFrequency,DownPayment,DynamicPayPlanTPOption,Note,IsHidden) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(payPlanTemplate.PayPlanTemplateNum)); sbRow.Append(",");
					}
					sbRow.Append("'"+POut.String(payPlanTemplate.PayPlanTemplateName)+"'"); sbRow.Append(",");
					sbRow.Append(POut.Long(payPlanTemplate.ClinicNum)); sbRow.Append(",");
					sbRow.Append(POut.Double(payPlanTemplate.APR)); sbRow.Append(",");
					sbRow.Append(POut.Int(payPlanTemplate.InterestDelay)); sbRow.Append(",");
					sbRow.Append(POut.Double(payPlanTemplate.PayAmt)); sbRow.Append(",");
					sbRow.Append(POut.Int(payPlanTemplate.NumberOfPayments)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)payPlanTemplate.ChargeFrequency)); sbRow.Append(",");
					sbRow.Append(POut.Double(payPlanTemplate.DownPayment)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)payPlanTemplate.DynamicPayPlanTPOption)); sbRow.Append(",");
					sbRow.Append("'"+POut.String(payPlanTemplate.Note)+"'"); sbRow.Append(",");
					sbRow.Append(POut.Bool(payPlanTemplate.IsHidden)); sbRow.Append(")");
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listPayPlanTemplates.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one PayPlanTemplate into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PayPlanTemplate payPlanTemplate) {
			return InsertNoCache(payPlanTemplate,false);
		}

		///<summary>Inserts one PayPlanTemplate into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PayPlanTemplate payPlanTemplate,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO payplantemplate (";
			if(!useExistingPK && isRandomKeys) {
				payPlanTemplate.PayPlanTemplateNum=ReplicationServers.GetKeyNoCache("payplantemplate","PayPlanTemplateNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="PayPlanTemplateNum,";
			}
			command+="PayPlanTemplateName,ClinicNum,APR,InterestDelay,PayAmt,NumberOfPayments,ChargeFrequency,DownPayment,DynamicPayPlanTPOption,Note,IsHidden) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(payPlanTemplate.PayPlanTemplateNum)+",";
			}
			command+=
				 "'"+POut.String(payPlanTemplate.PayPlanTemplateName)+"',"
				+    POut.Long  (payPlanTemplate.ClinicNum)+","
				+	   POut.Double(payPlanTemplate.APR)+","
				+    POut.Int   (payPlanTemplate.InterestDelay)+","
				+	   POut.Double(payPlanTemplate.PayAmt)+","
				+    POut.Int   (payPlanTemplate.NumberOfPayments)+","
				+    POut.Int   ((int)payPlanTemplate.ChargeFrequency)+","
				+	   POut.Double(payPlanTemplate.DownPayment)+","
				+    POut.Int   ((int)payPlanTemplate.DynamicPayPlanTPOption)+","
				+"'"+POut.String(payPlanTemplate.Note)+"',"
				+    POut.Bool  (payPlanTemplate.IsHidden)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				payPlanTemplate.PayPlanTemplateNum=Db.NonQ(command,true,"PayPlanTemplateNum","payPlanTemplate");
			}
			return payPlanTemplate.PayPlanTemplateNum;
		}

		///<summary>Updates one PayPlanTemplate in the database.</summary>
		public static void Update(PayPlanTemplate payPlanTemplate) {
			string command="UPDATE payplantemplate SET "
				+"PayPlanTemplateName   = '"+POut.String(payPlanTemplate.PayPlanTemplateName)+"', "
				+"ClinicNum             =  "+POut.Long  (payPlanTemplate.ClinicNum)+", "
				+"APR                   =  "+POut.Double(payPlanTemplate.APR)+", "
				+"InterestDelay         =  "+POut.Int   (payPlanTemplate.InterestDelay)+", "
				+"PayAmt                =  "+POut.Double(payPlanTemplate.PayAmt)+", "
				+"NumberOfPayments      =  "+POut.Int   (payPlanTemplate.NumberOfPayments)+", "
				+"ChargeFrequency       =  "+POut.Int   ((int)payPlanTemplate.ChargeFrequency)+", "
				+"DownPayment           =  "+POut.Double(payPlanTemplate.DownPayment)+", "
				+"DynamicPayPlanTPOption=  "+POut.Int   ((int)payPlanTemplate.DynamicPayPlanTPOption)+", "
				+"Note                  = '"+POut.String(payPlanTemplate.Note)+"', "
				+"IsHidden              =  "+POut.Bool  (payPlanTemplate.IsHidden)+" "
				+"WHERE PayPlanTemplateNum = "+POut.Long(payPlanTemplate.PayPlanTemplateNum);
			Db.NonQ(command);
		}

		///<summary>Updates one PayPlanTemplate in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(PayPlanTemplate payPlanTemplate,PayPlanTemplate oldPayPlanTemplate) {
			string command="";
			if(payPlanTemplate.PayPlanTemplateName != oldPayPlanTemplate.PayPlanTemplateName) {
				if(command!="") { command+=",";}
				command+="PayPlanTemplateName = '"+POut.String(payPlanTemplate.PayPlanTemplateName)+"'";
			}
			if(payPlanTemplate.ClinicNum != oldPayPlanTemplate.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(payPlanTemplate.ClinicNum)+"";
			}
			if(payPlanTemplate.APR != oldPayPlanTemplate.APR) {
				if(command!="") { command+=",";}
				command+="APR = "+POut.Double(payPlanTemplate.APR)+"";
			}
			if(payPlanTemplate.InterestDelay != oldPayPlanTemplate.InterestDelay) {
				if(command!="") { command+=",";}
				command+="InterestDelay = "+POut.Int(payPlanTemplate.InterestDelay)+"";
			}
			if(payPlanTemplate.PayAmt != oldPayPlanTemplate.PayAmt) {
				if(command!="") { command+=",";}
				command+="PayAmt = "+POut.Double(payPlanTemplate.PayAmt)+"";
			}
			if(payPlanTemplate.NumberOfPayments != oldPayPlanTemplate.NumberOfPayments) {
				if(command!="") { command+=",";}
				command+="NumberOfPayments = "+POut.Int(payPlanTemplate.NumberOfPayments)+"";
			}
			if(payPlanTemplate.ChargeFrequency != oldPayPlanTemplate.ChargeFrequency) {
				if(command!="") { command+=",";}
				command+="ChargeFrequency = "+POut.Int   ((int)payPlanTemplate.ChargeFrequency)+"";
			}
			if(payPlanTemplate.DownPayment != oldPayPlanTemplate.DownPayment) {
				if(command!="") { command+=",";}
				command+="DownPayment = "+POut.Double(payPlanTemplate.DownPayment)+"";
			}
			if(payPlanTemplate.DynamicPayPlanTPOption != oldPayPlanTemplate.DynamicPayPlanTPOption) {
				if(command!="") { command+=",";}
				command+="DynamicPayPlanTPOption = "+POut.Int   ((int)payPlanTemplate.DynamicPayPlanTPOption)+"";
			}
			if(payPlanTemplate.Note != oldPayPlanTemplate.Note) {
				if(command!="") { command+=",";}
				command+="Note = '"+POut.String(payPlanTemplate.Note)+"'";
			}
			if(payPlanTemplate.IsHidden != oldPayPlanTemplate.IsHidden) {
				if(command!="") { command+=",";}
				command+="IsHidden = "+POut.Bool(payPlanTemplate.IsHidden)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE payplantemplate SET "+command
				+" WHERE PayPlanTemplateNum = "+POut.Long(payPlanTemplate.PayPlanTemplateNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(PayPlanTemplate,PayPlanTemplate) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(PayPlanTemplate payPlanTemplate,PayPlanTemplate oldPayPlanTemplate) {
			if(payPlanTemplate.PayPlanTemplateName != oldPayPlanTemplate.PayPlanTemplateName) {
				return true;
			}
			if(payPlanTemplate.ClinicNum != oldPayPlanTemplate.ClinicNum) {
				return true;
			}
			if(payPlanTemplate.APR != oldPayPlanTemplate.APR) {
				return true;
			}
			if(payPlanTemplate.InterestDelay != oldPayPlanTemplate.InterestDelay) {
				return true;
			}
			if(payPlanTemplate.PayAmt != oldPayPlanTemplate.PayAmt) {
				return true;
			}
			if(payPlanTemplate.NumberOfPayments != oldPayPlanTemplate.NumberOfPayments) {
				return true;
			}
			if(payPlanTemplate.ChargeFrequency != oldPayPlanTemplate.ChargeFrequency) {
				return true;
			}
			if(payPlanTemplate.DownPayment != oldPayPlanTemplate.DownPayment) {
				return true;
			}
			if(payPlanTemplate.DynamicPayPlanTPOption != oldPayPlanTemplate.DynamicPayPlanTPOption) {
				return true;
			}
			if(payPlanTemplate.Note != oldPayPlanTemplate.Note) {
				return true;
			}
			if(payPlanTemplate.IsHidden != oldPayPlanTemplate.IsHidden) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one PayPlanTemplate from the database.</summary>
		public static void Delete(long payPlanTemplateNum) {
			string command="DELETE FROM payplantemplate "
				+"WHERE PayPlanTemplateNum = "+POut.Long(payPlanTemplateNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many PayPlanTemplates from the database.</summary>
		public static void DeleteMany(List<long> listPayPlanTemplateNums) {
			if(listPayPlanTemplateNums==null || listPayPlanTemplateNums.Count==0) {
				return;
			}
			string command="DELETE FROM payplantemplate "
				+"WHERE PayPlanTemplateNum IN("+string.Join(",",listPayPlanTemplateNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}