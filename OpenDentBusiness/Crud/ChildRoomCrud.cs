//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ChildRoomCrud {
		///<summary>Gets one ChildRoom object from the database using the primary key.  Returns null if not found.</summary>
		public static ChildRoom SelectOne(long childRoomNum) {
			string command="SELECT * FROM childroom "
				+"WHERE ChildRoomNum = "+POut.Long(childRoomNum);
			List<ChildRoom> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ChildRoom object from the database using a query.</summary>
		public static ChildRoom SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildRoom> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ChildRoom objects from the database using a query.</summary>
		public static List<ChildRoom> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildRoom> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ChildRoom> TableToList(DataTable table) {
			List<ChildRoom> retVal=new List<ChildRoom>();
			ChildRoom childRoom;
			foreach(DataRow row in table.Rows) {
				childRoom=new ChildRoom();
				childRoom.ChildRoomNum= PIn.Long  (row["ChildRoomNum"].ToString());
				childRoom.RoomId      = PIn.String(row["RoomId"].ToString());
				childRoom.Notes       = PIn.String(row["Notes"].ToString());
				childRoom.Ratio       = PIn.Double(row["Ratio"].ToString());
				retVal.Add(childRoom);
			}
			return retVal;
		}

		///<summary>Converts a list of ChildRoom into a DataTable.</summary>
		public static DataTable ListToTable(List<ChildRoom> listChildRooms,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ChildRoom";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ChildRoomNum");
			table.Columns.Add("RoomId");
			table.Columns.Add("Notes");
			table.Columns.Add("Ratio");
			foreach(ChildRoom childRoom in listChildRooms) {
				table.Rows.Add(new object[] {
					POut.Long  (childRoom.ChildRoomNum),
					            childRoom.RoomId,
					            childRoom.Notes,
					POut.Double(childRoom.Ratio),
				});
			}
			return table;
		}

		///<summary>Inserts one ChildRoom into the database.  Returns the new priKey.</summary>
		public static long Insert(ChildRoom childRoom) {
			return Insert(childRoom,false);
		}

		///<summary>Inserts one ChildRoom into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ChildRoom childRoom,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				childRoom.ChildRoomNum=ReplicationServers.GetKey("childroom","ChildRoomNum");
			}
			string command="INSERT INTO childroom (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ChildRoomNum,";
			}
			command+="RoomId,Notes,Ratio) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(childRoom.ChildRoomNum)+",";
			}
			command+=
				 "'"+POut.String(childRoom.RoomId)+"',"
				+"'"+POut.String(childRoom.Notes)+"',"
				+		 POut.Double(childRoom.Ratio)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				childRoom.ChildRoomNum=Db.NonQ(command,true,"ChildRoomNum","childRoom");
			}
			return childRoom.ChildRoomNum;
		}

		///<summary>Inserts one ChildRoom into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildRoom childRoom) {
			return InsertNoCache(childRoom,false);
		}

		///<summary>Inserts one ChildRoom into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildRoom childRoom,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO childroom (";
			if(!useExistingPK && isRandomKeys) {
				childRoom.ChildRoomNum=ReplicationServers.GetKeyNoCache("childroom","ChildRoomNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ChildRoomNum,";
			}
			command+="RoomId,Notes,Ratio) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(childRoom.ChildRoomNum)+",";
			}
			command+=
				 "'"+POut.String(childRoom.RoomId)+"',"
				+"'"+POut.String(childRoom.Notes)+"',"
				+	   POut.Double(childRoom.Ratio)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				childRoom.ChildRoomNum=Db.NonQ(command,true,"ChildRoomNum","childRoom");
			}
			return childRoom.ChildRoomNum;
		}

		///<summary>Updates one ChildRoom in the database.</summary>
		public static void Update(ChildRoom childRoom) {
			string command="UPDATE childroom SET "
				+"RoomId      = '"+POut.String(childRoom.RoomId)+"', "
				+"Notes       = '"+POut.String(childRoom.Notes)+"', "
				+"Ratio       =  "+POut.Double(childRoom.Ratio)+" "
				+"WHERE ChildRoomNum = "+POut.Long(childRoom.ChildRoomNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ChildRoom in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ChildRoom childRoom,ChildRoom oldChildRoom) {
			string command="";
			if(childRoom.RoomId != oldChildRoom.RoomId) {
				if(command!="") { command+=",";}
				command+="RoomId = '"+POut.String(childRoom.RoomId)+"'";
			}
			if(childRoom.Notes != oldChildRoom.Notes) {
				if(command!="") { command+=",";}
				command+="Notes = '"+POut.String(childRoom.Notes)+"'";
			}
			if(childRoom.Ratio != oldChildRoom.Ratio) {
				if(command!="") { command+=",";}
				command+="Ratio = "+POut.Double(childRoom.Ratio)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE childroom SET "+command
				+" WHERE ChildRoomNum = "+POut.Long(childRoom.ChildRoomNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ChildRoom,ChildRoom) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ChildRoom childRoom,ChildRoom oldChildRoom) {
			if(childRoom.RoomId != oldChildRoom.RoomId) {
				return true;
			}
			if(childRoom.Notes != oldChildRoom.Notes) {
				return true;
			}
			if(childRoom.Ratio != oldChildRoom.Ratio) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ChildRoom from the database.</summary>
		public static void Delete(long childRoomNum) {
			string command="DELETE FROM childroom "
				+"WHERE ChildRoomNum = "+POut.Long(childRoomNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ChildRooms from the database.</summary>
		public static void DeleteMany(List<long> listChildRoomNums) {
			if(listChildRoomNums==null || listChildRoomNums.Count==0) {
				return;
			}
			string command="DELETE FROM childroom "
				+"WHERE ChildRoomNum IN("+string.Join(",",listChildRoomNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}