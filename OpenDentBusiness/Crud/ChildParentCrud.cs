//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ChildParentCrud {
		///<summary>Gets one ChildParent object from the database using the primary key.  Returns null if not found.</summary>
		public static ChildParent SelectOne(long childParentNum) {
			string command="SELECT * FROM childparent "
				+"WHERE ChildParentNum = "+POut.Long(childParentNum);
			List<ChildParent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ChildParent object from the database using a query.</summary>
		public static ChildParent SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildParent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ChildParent objects from the database using a query.</summary>
		public static List<ChildParent> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildParent> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ChildParent> TableToList(DataTable table) {
			List<ChildParent> retVal=new List<ChildParent>();
			ChildParent childParent;
			foreach(DataRow row in table.Rows) {
				childParent=new ChildParent();
				childParent.ChildParentNum= PIn.Long  (row["ChildParentNum"].ToString());
				childParent.FName         = PIn.String(row["FName"].ToString());
				childParent.LName         = PIn.String(row["LName"].ToString());
				childParent.Notes         = PIn.String(row["Notes"].ToString());
				childParent.IsHidden      = PIn.Bool  (row["IsHidden"].ToString());
				childParent.BadgeId       = PIn.String(row["BadgeId"].ToString());
				retVal.Add(childParent);
			}
			return retVal;
		}

		///<summary>Converts a list of ChildParent into a DataTable.</summary>
		public static DataTable ListToTable(List<ChildParent> listChildParents,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ChildParent";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ChildParentNum");
			table.Columns.Add("FName");
			table.Columns.Add("LName");
			table.Columns.Add("Notes");
			table.Columns.Add("IsHidden");
			table.Columns.Add("BadgeId");
			foreach(ChildParent childParent in listChildParents) {
				table.Rows.Add(new object[] {
					POut.Long  (childParent.ChildParentNum),
					            childParent.FName,
					            childParent.LName,
					            childParent.Notes,
					POut.Bool  (childParent.IsHidden),
					            childParent.BadgeId,
				});
			}
			return table;
		}

		///<summary>Inserts one ChildParent into the database.  Returns the new priKey.</summary>
		public static long Insert(ChildParent childParent) {
			return Insert(childParent,false);
		}

		///<summary>Inserts one ChildParent into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ChildParent childParent,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				childParent.ChildParentNum=ReplicationServers.GetKey("childparent","ChildParentNum");
			}
			string command="INSERT INTO childparent (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ChildParentNum,";
			}
			command+="FName,LName,Notes,IsHidden,BadgeId) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(childParent.ChildParentNum)+",";
			}
			command+=
				 "'"+POut.String(childParent.FName)+"',"
				+"'"+POut.String(childParent.LName)+"',"
				+"'"+POut.String(childParent.Notes)+"',"
				+    POut.Bool  (childParent.IsHidden)+","
				+"'"+POut.String(childParent.BadgeId)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				childParent.ChildParentNum=Db.NonQ(command,true,"ChildParentNum","childParent");
			}
			return childParent.ChildParentNum;
		}

		///<summary>Inserts one ChildParent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildParent childParent) {
			return InsertNoCache(childParent,false);
		}

		///<summary>Inserts one ChildParent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildParent childParent,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO childparent (";
			if(!useExistingPK && isRandomKeys) {
				childParent.ChildParentNum=ReplicationServers.GetKeyNoCache("childparent","ChildParentNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ChildParentNum,";
			}
			command+="FName,LName,Notes,IsHidden,BadgeId) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(childParent.ChildParentNum)+",";
			}
			command+=
				 "'"+POut.String(childParent.FName)+"',"
				+"'"+POut.String(childParent.LName)+"',"
				+"'"+POut.String(childParent.Notes)+"',"
				+    POut.Bool  (childParent.IsHidden)+","
				+"'"+POut.String(childParent.BadgeId)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				childParent.ChildParentNum=Db.NonQ(command,true,"ChildParentNum","childParent");
			}
			return childParent.ChildParentNum;
		}

		///<summary>Updates one ChildParent in the database.</summary>
		public static void Update(ChildParent childParent) {
			string command="UPDATE childparent SET "
				+"FName         = '"+POut.String(childParent.FName)+"', "
				+"LName         = '"+POut.String(childParent.LName)+"', "
				+"Notes         = '"+POut.String(childParent.Notes)+"', "
				+"IsHidden      =  "+POut.Bool  (childParent.IsHidden)+", "
				+"BadgeId       = '"+POut.String(childParent.BadgeId)+"' "
				+"WHERE ChildParentNum = "+POut.Long(childParent.ChildParentNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ChildParent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ChildParent childParent,ChildParent oldChildParent) {
			string command="";
			if(childParent.FName != oldChildParent.FName) {
				if(command!="") { command+=",";}
				command+="FName = '"+POut.String(childParent.FName)+"'";
			}
			if(childParent.LName != oldChildParent.LName) {
				if(command!="") { command+=",";}
				command+="LName = '"+POut.String(childParent.LName)+"'";
			}
			if(childParent.Notes != oldChildParent.Notes) {
				if(command!="") { command+=",";}
				command+="Notes = '"+POut.String(childParent.Notes)+"'";
			}
			if(childParent.IsHidden != oldChildParent.IsHidden) {
				if(command!="") { command+=",";}
				command+="IsHidden = "+POut.Bool(childParent.IsHidden)+"";
			}
			if(childParent.BadgeId != oldChildParent.BadgeId) {
				if(command!="") { command+=",";}
				command+="BadgeId = '"+POut.String(childParent.BadgeId)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE childparent SET "+command
				+" WHERE ChildParentNum = "+POut.Long(childParent.ChildParentNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ChildParent,ChildParent) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ChildParent childParent,ChildParent oldChildParent) {
			if(childParent.FName != oldChildParent.FName) {
				return true;
			}
			if(childParent.LName != oldChildParent.LName) {
				return true;
			}
			if(childParent.Notes != oldChildParent.Notes) {
				return true;
			}
			if(childParent.IsHidden != oldChildParent.IsHidden) {
				return true;
			}
			if(childParent.BadgeId != oldChildParent.BadgeId) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ChildParent from the database.</summary>
		public static void Delete(long childParentNum) {
			string command="DELETE FROM childparent "
				+"WHERE ChildParentNum = "+POut.Long(childParentNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ChildParents from the database.</summary>
		public static void DeleteMany(List<long> listChildParentNums) {
			if(listChildParentNums==null || listChildParentNums.Count==0) {
				return;
			}
			string command="DELETE FROM childparent "
				+"WHERE ChildParentNum IN("+string.Join(",",listChildParentNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}