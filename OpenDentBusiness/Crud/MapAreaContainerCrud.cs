//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class MapAreaContainerCrud {
		///<summary>Gets one MapAreaContainer object from the database using the primary key.  Returns null if not found.</summary>
		public static MapAreaContainer SelectOne(long mapAreaContainerNum) {
			string command="SELECT * FROM mapareacontainer "
				+"WHERE MapAreaContainerNum = "+POut.Long(mapAreaContainerNum);
			List<MapAreaContainer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MapAreaContainer object from the database using a query.</summary>
		public static MapAreaContainer SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MapAreaContainer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of MapAreaContainer objects from the database using a query.</summary>
		public static List<MapAreaContainer> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MapAreaContainer> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<MapAreaContainer> TableToList(DataTable table) {
			List<MapAreaContainer> retVal=new List<MapAreaContainer>();
			MapAreaContainer mapAreaContainer;
			foreach(DataRow row in table.Rows) {
				mapAreaContainer=new MapAreaContainer();
				mapAreaContainer.MapAreaContainerNum= PIn.Long  (row["MapAreaContainerNum"].ToString());
				mapAreaContainer.FloorWidthFeet     = PIn.Int   (row["FloorWidthFeet"].ToString());
				mapAreaContainer.FloorHeightFeet    = PIn.Int   (row["FloorHeightFeet"].ToString());
				mapAreaContainer.PixelsPerFoot      = PIn.Int   (row["PixelsPerFoot"].ToString());
				mapAreaContainer.ShowGrid           = PIn.Bool  (row["ShowGrid"].ToString());
				mapAreaContainer.ShowOutline        = PIn.Bool  (row["ShowOutline"].ToString());
				mapAreaContainer.Description        = PIn.String(row["Description"].ToString());
				mapAreaContainer.SiteNum            = PIn.Long  (row["SiteNum"].ToString());
				retVal.Add(mapAreaContainer);
			}
			return retVal;
		}

		///<summary>Converts a list of MapAreaContainer into a DataTable.</summary>
		public static DataTable ListToTable(List<MapAreaContainer> listMapAreaContainers,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="MapAreaContainer";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("MapAreaContainerNum");
			table.Columns.Add("FloorWidthFeet");
			table.Columns.Add("FloorHeightFeet");
			table.Columns.Add("PixelsPerFoot");
			table.Columns.Add("ShowGrid");
			table.Columns.Add("ShowOutline");
			table.Columns.Add("Description");
			table.Columns.Add("SiteNum");
			foreach(MapAreaContainer mapAreaContainer in listMapAreaContainers) {
				table.Rows.Add(new object[] {
					POut.Long  (mapAreaContainer.MapAreaContainerNum),
					POut.Int   (mapAreaContainer.FloorWidthFeet),
					POut.Int   (mapAreaContainer.FloorHeightFeet),
					POut.Int   (mapAreaContainer.PixelsPerFoot),
					POut.Bool  (mapAreaContainer.ShowGrid),
					POut.Bool  (mapAreaContainer.ShowOutline),
					            mapAreaContainer.Description,
					POut.Long  (mapAreaContainer.SiteNum),
				});
			}
			return table;
		}

		///<summary>Inserts one MapAreaContainer into the database.  Returns the new priKey.</summary>
		public static long Insert(MapAreaContainer mapAreaContainer) {
			return Insert(mapAreaContainer,false);
		}

		///<summary>Inserts one MapAreaContainer into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(MapAreaContainer mapAreaContainer,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				mapAreaContainer.MapAreaContainerNum=ReplicationServers.GetKey("mapareacontainer","MapAreaContainerNum");
			}
			string command="INSERT INTO mapareacontainer (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="MapAreaContainerNum,";
			}
			command+="FloorWidthFeet,FloorHeightFeet,PixelsPerFoot,ShowGrid,ShowOutline,Description,SiteNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(mapAreaContainer.MapAreaContainerNum)+",";
			}
			command+=
				     POut.Int   (mapAreaContainer.FloorWidthFeet)+","
				+    POut.Int   (mapAreaContainer.FloorHeightFeet)+","
				+    POut.Int   (mapAreaContainer.PixelsPerFoot)+","
				+    POut.Bool  (mapAreaContainer.ShowGrid)+","
				+    POut.Bool  (mapAreaContainer.ShowOutline)+","
				+"'"+POut.String(mapAreaContainer.Description)+"',"
				+    POut.Long  (mapAreaContainer.SiteNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				mapAreaContainer.MapAreaContainerNum=Db.NonQ(command,true,"MapAreaContainerNum","mapAreaContainer");
			}
			return mapAreaContainer.MapAreaContainerNum;
		}

		///<summary>Inserts one MapAreaContainer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MapAreaContainer mapAreaContainer) {
			return InsertNoCache(mapAreaContainer,false);
		}

		///<summary>Inserts one MapAreaContainer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MapAreaContainer mapAreaContainer,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO mapareacontainer (";
			if(!useExistingPK && isRandomKeys) {
				mapAreaContainer.MapAreaContainerNum=ReplicationServers.GetKeyNoCache("mapareacontainer","MapAreaContainerNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="MapAreaContainerNum,";
			}
			command+="FloorWidthFeet,FloorHeightFeet,PixelsPerFoot,ShowGrid,ShowOutline,Description,SiteNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(mapAreaContainer.MapAreaContainerNum)+",";
			}
			command+=
				     POut.Int   (mapAreaContainer.FloorWidthFeet)+","
				+    POut.Int   (mapAreaContainer.FloorHeightFeet)+","
				+    POut.Int   (mapAreaContainer.PixelsPerFoot)+","
				+    POut.Bool  (mapAreaContainer.ShowGrid)+","
				+    POut.Bool  (mapAreaContainer.ShowOutline)+","
				+"'"+POut.String(mapAreaContainer.Description)+"',"
				+    POut.Long  (mapAreaContainer.SiteNum)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				mapAreaContainer.MapAreaContainerNum=Db.NonQ(command,true,"MapAreaContainerNum","mapAreaContainer");
			}
			return mapAreaContainer.MapAreaContainerNum;
		}

		///<summary>Updates one MapAreaContainer in the database.</summary>
		public static void Update(MapAreaContainer mapAreaContainer) {
			string command="UPDATE mapareacontainer SET "
				+"FloorWidthFeet     =  "+POut.Int   (mapAreaContainer.FloorWidthFeet)+", "
				+"FloorHeightFeet    =  "+POut.Int   (mapAreaContainer.FloorHeightFeet)+", "
				+"PixelsPerFoot      =  "+POut.Int   (mapAreaContainer.PixelsPerFoot)+", "
				+"ShowGrid           =  "+POut.Bool  (mapAreaContainer.ShowGrid)+", "
				+"ShowOutline        =  "+POut.Bool  (mapAreaContainer.ShowOutline)+", "
				+"Description        = '"+POut.String(mapAreaContainer.Description)+"', "
				+"SiteNum            =  "+POut.Long  (mapAreaContainer.SiteNum)+" "
				+"WHERE MapAreaContainerNum = "+POut.Long(mapAreaContainer.MapAreaContainerNum);
			Db.NonQ(command);
		}

		///<summary>Updates one MapAreaContainer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(MapAreaContainer mapAreaContainer,MapAreaContainer oldMapAreaContainer) {
			string command="";
			if(mapAreaContainer.FloorWidthFeet != oldMapAreaContainer.FloorWidthFeet) {
				if(command!="") { command+=",";}
				command+="FloorWidthFeet = "+POut.Int(mapAreaContainer.FloorWidthFeet)+"";
			}
			if(mapAreaContainer.FloorHeightFeet != oldMapAreaContainer.FloorHeightFeet) {
				if(command!="") { command+=",";}
				command+="FloorHeightFeet = "+POut.Int(mapAreaContainer.FloorHeightFeet)+"";
			}
			if(mapAreaContainer.PixelsPerFoot != oldMapAreaContainer.PixelsPerFoot) {
				if(command!="") { command+=",";}
				command+="PixelsPerFoot = "+POut.Int(mapAreaContainer.PixelsPerFoot)+"";
			}
			if(mapAreaContainer.ShowGrid != oldMapAreaContainer.ShowGrid) {
				if(command!="") { command+=",";}
				command+="ShowGrid = "+POut.Bool(mapAreaContainer.ShowGrid)+"";
			}
			if(mapAreaContainer.ShowOutline != oldMapAreaContainer.ShowOutline) {
				if(command!="") { command+=",";}
				command+="ShowOutline = "+POut.Bool(mapAreaContainer.ShowOutline)+"";
			}
			if(mapAreaContainer.Description != oldMapAreaContainer.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(mapAreaContainer.Description)+"'";
			}
			if(mapAreaContainer.SiteNum != oldMapAreaContainer.SiteNum) {
				if(command!="") { command+=",";}
				command+="SiteNum = "+POut.Long(mapAreaContainer.SiteNum)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE mapareacontainer SET "+command
				+" WHERE MapAreaContainerNum = "+POut.Long(mapAreaContainer.MapAreaContainerNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(MapAreaContainer,MapAreaContainer) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(MapAreaContainer mapAreaContainer,MapAreaContainer oldMapAreaContainer) {
			if(mapAreaContainer.FloorWidthFeet != oldMapAreaContainer.FloorWidthFeet) {
				return true;
			}
			if(mapAreaContainer.FloorHeightFeet != oldMapAreaContainer.FloorHeightFeet) {
				return true;
			}
			if(mapAreaContainer.PixelsPerFoot != oldMapAreaContainer.PixelsPerFoot) {
				return true;
			}
			if(mapAreaContainer.ShowGrid != oldMapAreaContainer.ShowGrid) {
				return true;
			}
			if(mapAreaContainer.ShowOutline != oldMapAreaContainer.ShowOutline) {
				return true;
			}
			if(mapAreaContainer.Description != oldMapAreaContainer.Description) {
				return true;
			}
			if(mapAreaContainer.SiteNum != oldMapAreaContainer.SiteNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one MapAreaContainer from the database.</summary>
		public static void Delete(long mapAreaContainerNum) {
			string command="DELETE FROM mapareacontainer "
				+"WHERE MapAreaContainerNum = "+POut.Long(mapAreaContainerNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many MapAreaContainers from the database.</summary>
		public static void DeleteMany(List<long> listMapAreaContainerNums) {
			if(listMapAreaContainerNums==null || listMapAreaContainerNums.Count==0) {
				return;
			}
			string command="DELETE FROM mapareacontainer "
				+"WHERE MapAreaContainerNum IN("+string.Join(",",listMapAreaContainerNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}