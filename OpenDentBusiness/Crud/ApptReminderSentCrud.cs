//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class ApptReminderSentCrud {
		///<summary>Gets one ApptReminderSent object from the database using the primary key.  Returns null if not found.</summary>
		public static ApptReminderSent SelectOne(long apptReminderSentNum) {
			string command="SELECT * FROM apptremindersent "
				+"WHERE ApptReminderSentNum = "+POut.Long(apptReminderSentNum);
			List<ApptReminderSent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ApptReminderSent object from the database using a query.</summary>
		public static ApptReminderSent SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ApptReminderSent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ApptReminderSent objects from the database using a query.</summary>
		public static List<ApptReminderSent> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ApptReminderSent> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ApptReminderSent> TableToList(DataTable table) {
			List<ApptReminderSent> retVal=new List<ApptReminderSent>();
			ApptReminderSent apptReminderSent;
			foreach(DataRow row in table.Rows) {
				apptReminderSent=new ApptReminderSent();
				apptReminderSent.ApptReminderSentNum= PIn.Long  (row["ApptReminderSentNum"].ToString());
				apptReminderSent.PatNum             = PIn.Long  (row["PatNum"].ToString());
				apptReminderSent.ClinicNum          = PIn.Long  (row["ClinicNum"].ToString());
				apptReminderSent.SendStatus         = (OpenDentBusiness.AutoCommStatus)PIn.Int(row["SendStatus"].ToString());
				apptReminderSent.MessageType        = (OpenDentBusiness.CommType)PIn.Int(row["MessageType"].ToString());
				apptReminderSent.MessageFk          = PIn.Long  (row["MessageFk"].ToString());
				apptReminderSent.DateTimeEntry      = PIn.DateT (row["DateTimeEntry"].ToString());
				apptReminderSent.DateTimeSent       = PIn.DateT (row["DateTimeSent"].ToString());
				apptReminderSent.ResponseDescript   = PIn.String(row["ResponseDescript"].ToString());
				apptReminderSent.ApptReminderRuleNum= PIn.Long  (row["ApptReminderRuleNum"].ToString());
				apptReminderSent.ApptNum            = PIn.Long  (row["ApptNum"].ToString());
				apptReminderSent.ApptDateTime       = PIn.DateT (row["ApptDateTime"].ToString());
				apptReminderSent.TSPrior            = TimeSpan.FromTicks(PIn.Long(row["TSPrior"].ToString()));
				retVal.Add(apptReminderSent);
			}
			return retVal;
		}

		///<summary>Converts a list of ApptReminderSent into a DataTable.</summary>
		public static DataTable ListToTable(List<ApptReminderSent> listApptReminderSents,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ApptReminderSent";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ApptReminderSentNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("SendStatus");
			table.Columns.Add("MessageType");
			table.Columns.Add("MessageFk");
			table.Columns.Add("DateTimeEntry");
			table.Columns.Add("DateTimeSent");
			table.Columns.Add("ResponseDescript");
			table.Columns.Add("ApptReminderRuleNum");
			table.Columns.Add("ApptNum");
			table.Columns.Add("ApptDateTime");
			table.Columns.Add("TSPrior");
			foreach(ApptReminderSent apptReminderSent in listApptReminderSents) {
				table.Rows.Add(new object[] {
					POut.Long  (apptReminderSent.ApptReminderSentNum),
					POut.Long  (apptReminderSent.PatNum),
					POut.Long  (apptReminderSent.ClinicNum),
					POut.Int   ((int)apptReminderSent.SendStatus),
					POut.Int   ((int)apptReminderSent.MessageType),
					POut.Long  (apptReminderSent.MessageFk),
					POut.DateT (apptReminderSent.DateTimeEntry,false),
					POut.DateT (apptReminderSent.DateTimeSent,false),
					            apptReminderSent.ResponseDescript,
					POut.Long  (apptReminderSent.ApptReminderRuleNum),
					POut.Long  (apptReminderSent.ApptNum),
					POut.DateT (apptReminderSent.ApptDateTime,false),
					POut.Long (apptReminderSent.TSPrior.Ticks),
				});
			}
			return table;
		}

		///<summary>Inserts one ApptReminderSent into the database.  Returns the new priKey.</summary>
		public static long Insert(ApptReminderSent apptReminderSent) {
			return Insert(apptReminderSent,false);
		}

		///<summary>Inserts one ApptReminderSent into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ApptReminderSent apptReminderSent,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				apptReminderSent.ApptReminderSentNum=ReplicationServers.GetKey("apptremindersent","ApptReminderSentNum");
			}
			string command="INSERT INTO apptremindersent (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ApptReminderSentNum,";
			}
			command+="PatNum,ClinicNum,SendStatus,MessageType,MessageFk,DateTimeEntry,DateTimeSent,ResponseDescript,ApptReminderRuleNum,ApptNum,ApptDateTime,TSPrior) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(apptReminderSent.ApptReminderSentNum)+",";
			}
			command+=
				     POut.Long  (apptReminderSent.PatNum)+","
				+    POut.Long  (apptReminderSent.ClinicNum)+","
				+    POut.Int   ((int)apptReminderSent.SendStatus)+","
				+    POut.Int   ((int)apptReminderSent.MessageType)+","
				+    POut.Long  (apptReminderSent.MessageFk)+","
				+    DbHelper.Now()+","
				+    POut.DateT (apptReminderSent.DateTimeSent)+","
				+    DbHelper.ParamChar+"paramResponseDescript,"
				+    POut.Long  (apptReminderSent.ApptReminderRuleNum)+","
				+    POut.Long  (apptReminderSent.ApptNum)+","
				+    POut.DateT (apptReminderSent.ApptDateTime)+","
				+"'"+POut.Long  (apptReminderSent.TSPrior.Ticks)+"')";
			if(apptReminderSent.ResponseDescript==null) {
				apptReminderSent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(apptReminderSent.ResponseDescript));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramResponseDescript);
			}
			else {
				apptReminderSent.ApptReminderSentNum=Db.NonQ(command,true,"ApptReminderSentNum","apptReminderSent",paramResponseDescript);
			}
			return apptReminderSent.ApptReminderSentNum;
		}

		///<summary>Inserts many ApptReminderSents into the database.</summary>
		public static void InsertMany(List<ApptReminderSent> listApptReminderSents) {
			InsertMany(listApptReminderSents,false);
		}

		///<summary>Inserts many ApptReminderSents into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<ApptReminderSent> listApptReminderSents,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(ApptReminderSent apptReminderSent in listApptReminderSents) {
					Insert(apptReminderSent);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listApptReminderSents.Count) {
					ApptReminderSent apptReminderSent=listApptReminderSents[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO apptremindersent (");
						if(useExistingPK) {
							sbCommands.Append("ApptReminderSentNum,");
						}
						sbCommands.Append("PatNum,ClinicNum,SendStatus,MessageType,MessageFk,DateTimeEntry,DateTimeSent,ResponseDescript,ApptReminderRuleNum,ApptNum,ApptDateTime,TSPrior) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(apptReminderSent.ApptReminderSentNum)); sbRow.Append(",");
					}
					sbRow.Append(POut.Long(apptReminderSent.PatNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(apptReminderSent.ClinicNum)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)apptReminderSent.SendStatus)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)apptReminderSent.MessageType)); sbRow.Append(",");
					sbRow.Append(POut.Long(apptReminderSent.MessageFk)); sbRow.Append(",");
					sbRow.Append(DbHelper.Now()); sbRow.Append(",");
					sbRow.Append(POut.DateT(apptReminderSent.DateTimeSent)); sbRow.Append(",");
					sbRow.Append("'"+POut.String(apptReminderSent.ResponseDescript)+"'"); sbRow.Append(",");
					sbRow.Append(POut.Long(apptReminderSent.ApptReminderRuleNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(apptReminderSent.ApptNum)); sbRow.Append(",");
					sbRow.Append(POut.DateT(apptReminderSent.ApptDateTime)); sbRow.Append(",");
					sbRow.Append("'"+POut.Long  (apptReminderSent.TSPrior.Ticks)+"'"); sbRow.Append(")");
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listApptReminderSents.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one ApptReminderSent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ApptReminderSent apptReminderSent) {
			return InsertNoCache(apptReminderSent,false);
		}

		///<summary>Inserts one ApptReminderSent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ApptReminderSent apptReminderSent,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO apptremindersent (";
			if(!useExistingPK && isRandomKeys) {
				apptReminderSent.ApptReminderSentNum=ReplicationServers.GetKeyNoCache("apptremindersent","ApptReminderSentNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ApptReminderSentNum,";
			}
			command+="PatNum,ClinicNum,SendStatus,MessageType,MessageFk,DateTimeEntry,DateTimeSent,ResponseDescript,ApptReminderRuleNum,ApptNum,ApptDateTime,TSPrior) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(apptReminderSent.ApptReminderSentNum)+",";
			}
			command+=
				     POut.Long  (apptReminderSent.PatNum)+","
				+    POut.Long  (apptReminderSent.ClinicNum)+","
				+    POut.Int   ((int)apptReminderSent.SendStatus)+","
				+    POut.Int   ((int)apptReminderSent.MessageType)+","
				+    POut.Long  (apptReminderSent.MessageFk)+","
				+    DbHelper.Now()+","
				+    POut.DateT (apptReminderSent.DateTimeSent)+","
				+    DbHelper.ParamChar+"paramResponseDescript,"
				+    POut.Long  (apptReminderSent.ApptReminderRuleNum)+","
				+    POut.Long  (apptReminderSent.ApptNum)+","
				+    POut.DateT (apptReminderSent.ApptDateTime)+","
				+"'"+POut.Long(apptReminderSent.TSPrior.Ticks)+"')";
			if(apptReminderSent.ResponseDescript==null) {
				apptReminderSent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(apptReminderSent.ResponseDescript));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramResponseDescript);
			}
			else {
				apptReminderSent.ApptReminderSentNum=Db.NonQ(command,true,"ApptReminderSentNum","apptReminderSent",paramResponseDescript);
			}
			return apptReminderSent.ApptReminderSentNum;
		}

		///<summary>Updates one ApptReminderSent in the database.</summary>
		public static void Update(ApptReminderSent apptReminderSent) {
			string command="UPDATE apptremindersent SET "
				+"PatNum             =  "+POut.Long  (apptReminderSent.PatNum)+", "
				+"ClinicNum          =  "+POut.Long  (apptReminderSent.ClinicNum)+", "
				+"SendStatus         =  "+POut.Int   ((int)apptReminderSent.SendStatus)+", "
				+"MessageType        =  "+POut.Int   ((int)apptReminderSent.MessageType)+", "
				+"MessageFk          =  "+POut.Long  (apptReminderSent.MessageFk)+", "
				//DateTimeEntry not allowed to change
				+"DateTimeSent       =  "+POut.DateT (apptReminderSent.DateTimeSent)+", "
				+"ResponseDescript   =  "+DbHelper.ParamChar+"paramResponseDescript, "
				+"ApptReminderRuleNum=  "+POut.Long  (apptReminderSent.ApptReminderRuleNum)+", "
				+"ApptNum            =  "+POut.Long  (apptReminderSent.ApptNum)+", "
				+"ApptDateTime       =  "+POut.DateT (apptReminderSent.ApptDateTime)+", "
				+"TSPrior            =  "+POut.Long  (apptReminderSent.TSPrior.Ticks)+" "
				+"WHERE ApptReminderSentNum = "+POut.Long(apptReminderSent.ApptReminderSentNum);
			if(apptReminderSent.ResponseDescript==null) {
				apptReminderSent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(apptReminderSent.ResponseDescript));
			Db.NonQ(command,paramResponseDescript);
		}

		///<summary>Updates one ApptReminderSent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ApptReminderSent apptReminderSent,ApptReminderSent oldApptReminderSent) {
			string command="";
			if(apptReminderSent.PatNum != oldApptReminderSent.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(apptReminderSent.PatNum)+"";
			}
			if(apptReminderSent.ClinicNum != oldApptReminderSent.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(apptReminderSent.ClinicNum)+"";
			}
			if(apptReminderSent.SendStatus != oldApptReminderSent.SendStatus) {
				if(command!="") { command+=",";}
				command+="SendStatus = "+POut.Int   ((int)apptReminderSent.SendStatus)+"";
			}
			if(apptReminderSent.MessageType != oldApptReminderSent.MessageType) {
				if(command!="") { command+=",";}
				command+="MessageType = "+POut.Int   ((int)apptReminderSent.MessageType)+"";
			}
			if(apptReminderSent.MessageFk != oldApptReminderSent.MessageFk) {
				if(command!="") { command+=",";}
				command+="MessageFk = "+POut.Long(apptReminderSent.MessageFk)+"";
			}
			//DateTimeEntry not allowed to change
			if(apptReminderSent.DateTimeSent != oldApptReminderSent.DateTimeSent) {
				if(command!="") { command+=",";}
				command+="DateTimeSent = "+POut.DateT(apptReminderSent.DateTimeSent)+"";
			}
			if(apptReminderSent.ResponseDescript != oldApptReminderSent.ResponseDescript) {
				if(command!="") { command+=",";}
				command+="ResponseDescript = "+DbHelper.ParamChar+"paramResponseDescript";
			}
			if(apptReminderSent.ApptReminderRuleNum != oldApptReminderSent.ApptReminderRuleNum) {
				if(command!="") { command+=",";}
				command+="ApptReminderRuleNum = "+POut.Long(apptReminderSent.ApptReminderRuleNum)+"";
			}
			if(apptReminderSent.ApptNum != oldApptReminderSent.ApptNum) {
				if(command!="") { command+=",";}
				command+="ApptNum = "+POut.Long(apptReminderSent.ApptNum)+"";
			}
			if(apptReminderSent.ApptDateTime != oldApptReminderSent.ApptDateTime) {
				if(command!="") { command+=",";}
				command+="ApptDateTime = "+POut.DateT(apptReminderSent.ApptDateTime)+"";
			}
			if(apptReminderSent.TSPrior != oldApptReminderSent.TSPrior) {
				if(command!="") { command+=",";}
				command+="TSPrior = '"+POut.Long  (apptReminderSent.TSPrior.Ticks)+"'";
			}
			if(command=="") {
				return false;
			}
			if(apptReminderSent.ResponseDescript==null) {
				apptReminderSent.ResponseDescript="";
			}
			OdSqlParameter paramResponseDescript=new OdSqlParameter("paramResponseDescript",OdDbType.Text,POut.StringParam(apptReminderSent.ResponseDescript));
			command="UPDATE apptremindersent SET "+command
				+" WHERE ApptReminderSentNum = "+POut.Long(apptReminderSent.ApptReminderSentNum);
			Db.NonQ(command,paramResponseDescript);
			return true;
		}

		///<summary>Returns true if Update(ApptReminderSent,ApptReminderSent) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ApptReminderSent apptReminderSent,ApptReminderSent oldApptReminderSent) {
			if(apptReminderSent.PatNum != oldApptReminderSent.PatNum) {
				return true;
			}
			if(apptReminderSent.ClinicNum != oldApptReminderSent.ClinicNum) {
				return true;
			}
			if(apptReminderSent.SendStatus != oldApptReminderSent.SendStatus) {
				return true;
			}
			if(apptReminderSent.MessageType != oldApptReminderSent.MessageType) {
				return true;
			}
			if(apptReminderSent.MessageFk != oldApptReminderSent.MessageFk) {
				return true;
			}
			//DateTimeEntry not allowed to change
			if(apptReminderSent.DateTimeSent != oldApptReminderSent.DateTimeSent) {
				return true;
			}
			if(apptReminderSent.ResponseDescript != oldApptReminderSent.ResponseDescript) {
				return true;
			}
			if(apptReminderSent.ApptReminderRuleNum != oldApptReminderSent.ApptReminderRuleNum) {
				return true;
			}
			if(apptReminderSent.ApptNum != oldApptReminderSent.ApptNum) {
				return true;
			}
			if(apptReminderSent.ApptDateTime != oldApptReminderSent.ApptDateTime) {
				return true;
			}
			if(apptReminderSent.TSPrior != oldApptReminderSent.TSPrior) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ApptReminderSent from the database.</summary>
		public static void Delete(long apptReminderSentNum) {
			string command="DELETE FROM apptremindersent "
				+"WHERE ApptReminderSentNum = "+POut.Long(apptReminderSentNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ApptReminderSents from the database.</summary>
		public static void DeleteMany(List<long> listApptReminderSentNums) {
			if(listApptReminderSentNums==null || listApptReminderSentNums.Count==0) {
				return;
			}
			string command="DELETE FROM apptremindersent "
				+"WHERE ApptReminderSentNum IN("+string.Join(",",listApptReminderSentNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}