using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using CodeBase;
using OpenDentBusiness.AutoComm;
using OpenDentBusiness.WebTypes.AutoComm;

namespace OpenDentBusiness {
	///<summary>Web Sched recall reminders that may have been sent via EConnector to HQ.</summary>
	[CrudTable(HasBatchWriteMethods=true)]
	public class WebSchedRecall:TableBase,IAutoCommGuid {
		///<summary>PK. Generated by HQ.</summary>
		[CrudColumn(IsPriKey=true)]
		public long WebSchedRecallNum;
		///<summary>FK to recall.RecallNum. Generated by OD.</summary>
		public long RecallNum;
		///<summary>The date that the recall is due.</summary>
		[XmlIgnore]
		[CrudColumn(SpecialType=CrudSpecialColType.DateT)]
		public DateTime DateDue;
		///<summary>The number of reminders that have been sent for this recall.</summary>
		[XmlIgnore]
		public int ReminderCount;
		///<summary>The most recent time that sending a reminder failed. Will be 01/01/0001 if a reminder has never been attempted.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateT)]
		[XmlIgnore]
		public DateTime DateTimeSendFailed;
		///<summary>Enum:WebSchedRecallSource Where this row came from.</summary>
		public WebSchedRecallSource Source;
		///<summary>FK to commlog associated to this WebSchedRecall.</summary>
		[XmlIgnore]
		public long CommlogNum;
		///<summary>FK to patient.PatNum for the corresponding patient.</summary>
		public long PatNum;
		///<summary>FK to clinic.ClinicNum for the corresponding appointment.</summary>
		public long ClinicNum;
		///<summary>Contact information used for sending a message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string Contact;
		///<summary>Enum:AutoCommStatus The status of the email or text being sent for this recall.</summary>
		public AutoCommStatus SendStatus;
		///<summary>Enum:CommType The type of message being sent for this recall.</summary>
		public CommType MessageType=CommType.Invalid; 
		///<summary>The template that will be used when creating the message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string TemplateMessage;
		///<summary>FK to primary key of appropriate table.</summary>
		[XmlIgnore]
		public long MessageFk;
		///<summary>Subject of the message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string Subject;
		///<summary>Content of the message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string Message;
		///<summary>Generated by OD. Timestamp when row is created.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateTEntry)]
		[XmlIgnore]
		public DateTime DateTimeEntry;
		///<summary>DateTime the message was sent.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateT)]
		[XmlIgnore]
		public DateTime DateTimeSent;
		///<summary>Generated by OD in some cases and HQ in others. Any human readable error message generated by either HQ or EConnector. Used for debugging.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.IsText)]
		public string ResponseDescript;
		///<summary>FK to apptreminderrule.ApptReminderRuleNum. Allows us to look up the rules to determine how to send this apptcomm out.</summary>
		public long ApptReminderRuleNum;
		///<summary>A list of CalendarIcsInfo objects. Currently intended to be used by ThankYous, Reminder, and Confirmations for AddToCalendar tag replacements and
		///generating ics files.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public List<CalendarIcsInfo> ListCalIcsInfos;
		///<summary>Generated by HQ. Identifies this AutoCommGuid in future transactions between HQ and OD.</summary>
		public string ShortGUID;
		///<summary>Stores the information for the WebSchedRecalls that are grouped with this WebSchedRecall instance's message.  Only used to send to HQ
		///in a group.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public List<WebSchedAgg.WebSchedRecallFam> ListWebSchedRecallFams=new List<WebSchedAgg.WebSchedRecallFam>();
		///<summary>Deprecated.  Use MessageFK and MessageType instead.FK to message table, ex. smstomobile.GuidMessage. Generated at HQ.  References 
		///'Mobile' to limit schema changes, since that field already existed and is serialized for payloads sent to WebServiceMainHQ.  May not necessarily 
		///be an identifier in the smstomobile table, ex. could be an EmailMessage.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string GuidMessageToMobile;

		#region AutoCommSent
		string IAutoCommSent.GuidMessageToMobile {
			get {
				return GuidMessageToMobile;
			}
			set {
				GuidMessageToMobile=value;
			}
		}

		long IAutoCommSent.PatNum {
			get {
				return PatNum;
			} 
			set {
				PatNum=value;
			}
		}

		long IAutoCommSent.ClinicNum {
			get {
				return ClinicNum;
			}
			set {
				ClinicNum=value;
			}
		}

		string IAutoCommSent.Contact {
			get {
				return Contact;
			}
			set {
				Contact=value;
			}
		}
		AutoCommStatus IAutoCommSent.SendStatus {
			get {
				return SendStatus;
			}
			set {
				SendStatus=value;
			}
		}
		CommType IAutoCommSent.MessageType {
			get {
				return MessageType;
			}
			set {
				MessageType=value;
			}
		}
		string IAutoCommSent.TemplateMessage {
			get {
				return TemplateMessage;
			}
			set {
				TemplateMessage=value;
			}
		}
		long IAutoCommSent.MessageFk {
			get {
				return MessageFk;
			}
			set {
				MessageFk=value;
			}
		}
		string IAutoCommSent.Subject {
			get {
				return Subject;
			}
			set {
				Subject=value;
			}
		}
		string IAutoCommSent.Message {
			get {
				return Message;
			}
			set {
				Message=value;
			}
		}
		DateTime IAutoCommSent.DateTimeEntry {
			get {
				return DateTimeEntry;
			}
			set {
				DateTimeEntry=value;
			}
		}
		DateTime IAutoCommSent.DateTimeSent {
			get {
				return DateTimeSent;
			}
			set {
				DateTimeSent=value;
			}
		}
		string IAutoCommSent.ResponseDescript {
			get {
				return ResponseDescript;
			}
			set {
				ResponseDescript=value;
			}
		}
		long IAutoCommSent.ApptReminderRuleNum {
			get {
				return ApptReminderRuleNum;
			}
			set {
				ApptReminderRuleNum=value;
			}
		}
		string IAutoCommGuid.ShortGUID {
			get {
				return ShortGUID;
			}
			set {
				ShortGUID=value;
			}
		}
		#endregion AutoCommSent

		public IAutoCommSent Copy() {
			return (WebSchedRecall)MemberwiseClone();
		}

		public bool HasSubject() {
			return EnumTools.GetAttributeOrDefault<CommTypeAttribute>(MessageType).ContactMethod==ContactMethod.Email;
		}
	}
	
	///<summary>Used by both Statement and WebSchedRecall (and probably other places).</summary>
	public enum AutoCommStatus {
		///<summary>0 - Should not be in the database but can be used in the program.</summary>
		Undefined,
		///<summary>1 - Do not send a reminder.</summary>
		DoNotSend,
		///<summary>2 - Has not been attempted to send yet.</summary>
		SendNotAttempted,
		///<summary>3 - Has been sent successfully.</summary>
		SendSuccessful,
		///<summary>4 - Attempted to send but not successful.</summary>
		SendFailed,
		///<summary>5 - Has been sent successfully, awaiting receipt.</summary>
		SentAwaitingReceipt,
	}

	public enum WebSchedRecallSource {
		///<summary>0 - Should not be in the database.</summary>
		Undefined,
		///<summary>1 - Originated from a user clicking the Web Sched button in the Recall List.</summary>
		FormRecallList,
		///<summary>2 - The eConnector created this row in the Auto Comm Web Sched thread.</summary>
		EConnectorAutoComm,
	}

}
