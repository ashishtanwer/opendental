using System;
using System.Xml.Serialization;
using CodeBase;
using OpenDentBusiness.WebTypes.AutoComm;

namespace OpenDentBusiness {
	///<summary>When a reminder is sent for an appointment a record of that send is stored here. This is used to prevent re-sends of the same reminder.</summary>
	[Serializable,CrudTable(HasBatchWriteMethods=true)]
	public class PromotionLog:TableBase,IAutoCommSent {
		///<summary>Primary key.</summary>
		[CrudColumn(IsPriKey=true)]
		public long PromotionLogNum;
		///<summary>FK to promotion.PromotionNum</summary>
		public long PromotionNum;
		///<summary>A foreign key from the email hosting API that allows us to receive status updates on this specific email.</summary>
		public long EmailHostingFK;
		///<summary>Enum:PromotionLogStatus </summary>
		public PromotionLogStatus PromotionStatus;
		///<summary>FK to patient.PatNum for the corresponding patient.</summary>
		public long PatNum;
		///<summary>FK to clinic.ClinicNum for the corresponding appointment.</summary>
		public long ClinicNum;
		///<summary>Contact information used for sending a message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string Contact;
		///<summary>Indicates status of message.</summary>
		public AutoCommStatus SendStatus;
		///<summary></summary>
		public CommType MessageType=CommType.Invalid; 
		///<summary>The template that will be used when creating the message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string TemplateMessage;
		///<summary>FK to primary key of appropriate table.</summary>
		[XmlIgnore]
		public long MessageFk;
		///<summary>Subject of the message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string Subject;
		///<summary>Content of the message.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string Message;
		///<summary>Generated by OD. Timestamp when row is created.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateTEntry)]
		[XmlIgnore]
		public DateTime DateTimeEntry;
		///<summary>DateTime the message was sent.</summary>
		[CrudColumn(SpecialType = CrudSpecialColType.DateT)]
		[XmlIgnore]
		public DateTime DateTimeSent;
		///<summary>Generated by OD in some cases and HQ in others. Any human readable error message generated by either HQ or EConnector. Used for debugging.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.IsText)]
		public string ResponseDescript;
		///<summary>FK to apptreminderrule.ApptReminderRuleNum. Allows us to look up the rules to determine how to send this apptcomm out.</summary>
		public long ApptReminderRuleNum;
		#region Obsolete
		///<summary>Deprecated. Included for backward compatibility (even though we were never passing PromotionLogs via DTO). FK to emailmessage.EmailMessageNum
		///The email that was sent for this promotion.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public long EmailMessageNum;
		///<summary>Deprecated.  Use MessageFK and MessageType instead.FK to message table, ex. smstomobile.GuidMessage. Generated at HQ.  References 
		///'Mobile' to limit schema changes, since that field already existed and is serialized for payloads sent to WebServiceMainHQ.  May not necessarily 
		///be an identifier in the smstomobile table, ex. could be an EmailMessage.</summary>
		[CrudColumn(IsNotDbColumn=true)]
		public string GuidMessageToMobile;
		#endregion

		#region AutoCommSent
		string IAutoCommSent.GuidMessageToMobile {
			get {
				return GuidMessageToMobile;
			}
			set {
				GuidMessageToMobile=value;
			}
		}

		long IAutoCommSent.PatNum {
			get {
				return PatNum;
			} 
			set {
				PatNum=value;
			}
		}

		long IAutoCommSent.ClinicNum {
			get {
				return ClinicNum;
			}
			set {
				ClinicNum=value;
			}
		}

		string IAutoCommSent.Contact {
			get {
				return Contact;
			}
			set {
				Contact=value;
			}
		}
		AutoCommStatus IAutoCommSent.SendStatus {
			get {
				return SendStatus;
			}
			set {
				SendStatus=value;
			}
		}
		CommType IAutoCommSent.MessageType {
			get {
				return MessageType;
			}
			set {
				MessageType=value;
			}
		}
		string IAutoCommSent.TemplateMessage {
			get {
				return TemplateMessage;
			}
			set {
				TemplateMessage=value;
			}
		}
		long IAutoCommSent.MessageFk {
			get {
				return MessageFk;
			}
			set {
				MessageFk=value;
			}
		}
		string IAutoCommSent.Subject {
			get {
				return Subject;
			}
			set {
				Subject=value;
			}
		}
		string IAutoCommSent.Message {
			get {
				return Message;
			}
			set {
				Message=value;
			}
		}
		DateTime IAutoCommSent.DateTimeEntry {
			get {
				return DateTimeEntry;
			}
			set {
				DateTimeEntry=value;
			}
		}
		DateTime IAutoCommSent.DateTimeSent {
			get {
				return DateTimeSent;
			}
			set {
				DateTimeSent=value;
			}
		}
		string IAutoCommSent.ResponseDescript {
			get {
				return ResponseDescript;
			}
			set {
				ResponseDescript=value;
			}
		}
		long IAutoCommSent.ApptReminderRuleNum {
			get {
				return ApptReminderRuleNum;
			}
			set {
				ApptReminderRuleNum=value;
			}
		}
		#endregion AutoCommSent

		///<summary></summary>
		public PromotionLog Clone() {
			return (PromotionLog)MemberwiseClone();
		}

		public IAutoCommSent Copy() {
			return (PromotionLog)MemberwiseClone();
		}

		public bool HasSubject() {
			return EnumTools.GetAttributeOrDefault<CommTypeAttribute>(MessageType).ContactMethod==ContactMethod.Email;
		}
	}

	///<summary>Preserve order. If one needs to be added here, consider the verisonless webhook at HQ.</summary>
	public enum PromotionLogStatus {
		///<summary>0 - Unknown</summary>
		Unknown,
		///<summary>1 - Promotion has not been sent.</summary>
		Pending,
		///<summary>2 - Email has bounced because email does not exist.</summary>
		Bounced,
		///<summary>3 - User has unsubscribed in the passed and this was rejected.</summary>
		Unsubscribed,
		///<summary>4 - This email was sent and then marked as spam by the user.</summary>
		Complaint,
		///<summary>5 - The email sent and delivered successfully.</summary>
		Delivered,
		///<summary>6 - The email failed to send for a different reason than any of the reasons above.</summary>
		Failed,
		///<summary>7 - The email was opened by the user.</summary>
		Opened,
	}
}
